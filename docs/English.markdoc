
`jVue`
======

Back-End SFC Compiler
---------------------	
	
	Purpose
	-------	
		
		To compile `.vue` file to ES 6 module.
		
	Download
	--------	
		
		```	.sh
			npm install j-vue
		
	Load
	----	
		
		```	.js
			const jVue = require('j-vue');
		
	API
	---	
		
		`new jVue.SFC(vue)`
		-------------------	
			
			The parameter `vue` is the original `Buffer` (recommended) or a `string` of `.vue` file.
			
			In order to avoid unexpected parsing ambiguity, errors will be reported as strictly as possible.
			
		`sfc.export('default')`
		-----------------------	
			
			To generate the component's default export content string according to the content in `script` block or its `src' attribute. (For the generated `JavaScript` code is padded line wrapping and indentation as the original file, so source map is not provided.)
			
			Note: If there is a `lang` attribute which value is other than `js` / `jsx` / `ts` / `tsx` (or semantic similar), then the user must transpile (its `inner` property value) and set to its `innerJS` property.
			
		`sfc.export('var'  [, from = 'j-vue'])`
		`sfc.export('const'[, from = 'j-vue'])`
		`sfc.export('let'  [, from = 'j-vue'])`
		---------------------------------------	
			
			When the second parameter `from` is string or default, it will be used as the module id to introduce the jVue front-end runtime dependency library.
			
			Then here is going to generate the component's `scopeFunction` (or `scopeObject`), `template`, `Render`, `render`, `staticRenderFns` self using information export string, according to the contents in `template` and `style` blocks or their `src' attribute.
			`Identifier`, `Scope`, `Style`, `remove`, `Component`, `mixin`, `prop` of `j-vue` will be exported too, to make them simply to use.
			Module content is similar to this:
			
			```	.js
				import * as jVue from 'j-vue';
				export var scopeFunction   = /*#__PURE__*/ jVue.Scope();
				export var template        = /*#__PURE__*/ jVue.Template('<br />', scopeFunction);
				export var Render          = /*#__PURE__*/ jVue.Render('({ h }){ return function render () { return h("br") }; }', scopeFunction);
				export var render          = /*#__PURE__*/ jVue.Render('return this.$createElement("br");', scopeFunction);
				export var staticRenderFns = /*#__PURE__*/ jVue.StaticRenderFns([], scopeFunction);
				export { Identifier, Scope, Style, remove, Component, mixin, prop } from 'j-vue';
			
			When use `'const'` or `'let'`, the parameter of `Render` and `StaticRenderFns` (the compiled template) will also be compressed as ES 6.
			
			When the second parameter `from` is `null`, `template` and `style` blocks won't be scoped (usually used in Shadow DOM). In this case, the export content is:
			
			```	.js
				export var styles          = [];
				export var template        = '<br />';
				export var Render          = class Render { constructor ({ h }) { return function render () { return h('br'); }; } };
				export var render          = function render () { return this.$createElement('br'); };
				export var staticRenderFns = [];
			
			Note: If there is a `lang` attribute which value is other than `html` (or semantic similar) in the `template` block, or any `style` block has a `lang` attribute which value is other than `css` (or semantic similar), then the user must transpile (its `inner` property value) and set to its `innerHTML` / `innerCSS` property.
	
Front-End Runtime Dependency
----------------------------	
	
	Purpose
	-------	
		
		When use `@ltd/j-dev`#1# to build a front end project including `.vue` file#2#, the final front end runtime code generated, need to use this module to finish the final step.
		(The reason why the building can't be completed while front-end compiling, is due to the global unique identifier generator must execute in the final running scenario. Only in this way, we can ensure the selector names for scoped style and so on will never conflict.)
		
		#1#	A package published on `NPM`. It's a tool for automatic project building.
		#2#	The single-file component of `Vue`. It's convenient for developing, but need compiling.
		
	Download
	--------	
		
		>> https://GitHub.com/LongTengDao/j-vue/tree/master/dist/ <<
		
	Load
	----	
		
		Global Mode
		-----------	
			```	.html
				<script src="j-vue.js"></script>
				<script>
					jVue;
				</script>
			
		AMD Mode (Take `RequireJS` for example)
		--------	
			
			Global Load
			-----------	
				```	.html
					<script src="require.js"></script>
					<script>
						require(['j-vue'], function (jVue) {
							jVue;
						});
					</script>
				
			Load in Module
			--------------	
				```	.js
					define(['j-vue'], function (jVue) {
						jVue;
					});
		
	API
	---	
		`jVue.Identifier()`
		-------------------	
			
			Return a global unique identifier#3#.
			
		#3#	"identifier" is a `string`; identifier generated each time, is global unique in `jVue`.
			It's leaded by a lowercase letter, and followed with lowercase letters or digits (under the rule for `.key` mode bare key name accessing to object property in `JavaScript (ECMAScript 5+)`).
			The aim is to be as short as possible, while being based on the premise that it can be used for legal `class` selector or any other purpose, with high cache index performance (avoid to become "dict mode" or require case conversion).
			(In order to be able to be a keyframe name, etc., CSS syntax reserved words `inherit`, `initial`, `unset`, `default`, `none`, `auto`, `span`, `contents`, etc. are skipped. `notranslate` has side effects when used as `class`, so it will also be skipped.)
			
		`jVue.Scope([keys])`
		--------------------	
			
			If the parameter `keys` not exists, it will return an identifier generator `scope` in `function` type. When use that, the only parameter `key` is a `string`, the value returned is a global unique identifier#3# (for same identifier generator, pass same `key` in, you will get same value).
			Alternatively, you can pass arguments allowed by `:class` directly into this function (`string`, `object`, or `Array`), which will convert the aliases one by one.
			
			If the parameter `keys` exists, it will return an `object` `scope`. The `keys` should be a `string`, using charactor(s) which `` /(?!\d)[^\x00-/:-@[-`{-\x7F\s]+(?:_[^\x00-/:-@[-`{-\x7F\s]+)*/ `` won't match to split each `key` inner. Global unique identifiers#3# will be generated for each `key`, and be cached in the `object` returned (the key name is the corresponding `key`).
			In addition to higher runtime performance, this allows you to specify what needs to be captured by the regular.
			
			This function allows you to use another `scope` as `this`. In this case, the new `scope` returned will "extend" `this`.
			`this` can also be an `Array` of `scope`. In this case, the new `scope` returned will "extend" an `scope` which mixed all these `scope` in.
			
		<RE>	`/__(?=\S*?__)(?!\d)([\dA-Za-z\x80-\uFFFF]+_)+_/g`
			
		`jVue.Style(css[, scope])`
		--------------------------	
			
			Create a `<style>`, append to the `<head>` node, and return that `<style>`.
			
			The parameter `css` is a `string`, as the content of the `<style>` created.
			
			If the second parameter `scope` exists, all parts matching <RE> in parameter `css` will be tried to be replaced to the `key` (the matched part after `.slice(2, -2)`) mapped value in the `scope`.
			
		`jVue.remove(style)`
		--------------------	
			
			The parameter `style` is a `<style>`, it will be removed from the `<head>` node.
			
			The returned value of the function is itself, so as to chaining call.
			
		`jVue.Template(html, scope)`
		----------------------------	
			
			The parameter `html` is a `string`, all parts matched <RE> in `html` will be tried to be replaced to the `key` (the matched part after `.slice(2, -2)`) mapped value in the `scope`, then return.
			
		`jVue.Render(code[, scope])`
		----------------------------	
			
			The parameter `code` is a `string`, and the value returned is <renderOrRender>.
			
			If the second parameter `scope` exists, all parts matched <RE> in `code` will be tried to be replaced to the `key` (the matched part after `.slice(2, -2)`) mapped value in the `scope`.
			
		<renderOrRender>	`Function( code[0]==='(' ? 'return class { constructor ' + code + ' };' : 'return function () { ' + code + ' };' )()`
			
		`jVue.StaticRenderFns(codes[, scope])`
		--------------------------------------	
			
			The parameter `codes` is an `Array` of `string`, and the value returned is an `Array` of `function` (using <renderOrRender> to generate each one).
			
			If the second parameter `scope` exists, then all parts matched <RE> in each `string`, will be tried to be replaced to the `key` (the matched part after `.slice(2, -2)`) mapped value in the `scope`.
			
		`jVue.prop`
		-----------	
			
			Because Vue 3 removed the `.prop` modifier of `v-bind`, jVue add simple directive `v-prop`, you can set prop one by one via `v-prop:key="value"`, or set together via `v-prop="{ key: value }"`.
