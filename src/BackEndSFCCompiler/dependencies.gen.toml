[2.Select]

const = '''
function genSelect (el, value, modifiers) {
	addHandler(el, 'change', `
		{
			const VALUE = _value ?? '_value';
			const { multiple, options } = $event.target;
			if ( $event = multiple ? [] : void null ) {
				let length = 0;
				for ( const option of options ) {
					if ( option.selected ) {
						$event[length++] = ${modifiers && modifiers.number ? '_n' : ''}(VALUE in option ? option[VALUE] : option.value);
					}
				}
			}
			else {
				for ( const option of options ) {
					if ( option.selected ) {
						$event           = ${modifiers && modifiers.number ? '_n' : ''}(VALUE in option ? option[VALUE] : option.value); break;
					}
				}
			}
		}
		${genAssignmentCode(value, '$event')}`, null, true);
}
'''

var = '''
function genSelect (el, value, modifiers) {
	addHandler(el, 'change', `
		$event = {
			v: $event.target.multiple ? [] : void null,
			i: 0,
			s: $event.target.options,
			$: 0,
			_: _value || '_value',
		};
		if ( $event.v ) {
			while ( $event.i<$event.s.length ) {
				if ( ( $event.$ = $event.s[$event.i++] ).selected ) {
					$event.v[$event.v.length] = ${modifiers && modifiers.number ? '_n' : ''}($event.$[$event._ in $event.$ ? $event._ : 'value']);
				}
			}
		}
		else {
			while ( $event.i<$event.s.length ) {
				if ( ( $event.$ = $event.s[$event.i++] ).selected ) {
					$event.v                         = ${modifiers && modifiers.number ? '_n' : ''}($event.$[$event._ in $event.$ ? $event._ : 'value']); break;
				}
			}
		}
		${genAssignmentCode(value, '$event.v')}`, null, true);
}
'''

[2.CheckboxModel]

const = '''
function genCheckboxModel (el, value, modifiers) {
	const valueBinding = getBindingAttr(el, 'value') || 'null';
	const trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
	const falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
	addProp(el, 'checked', `[].constructor.isArray(${value}) ? _i(${value}, ${valueBinding})>-1 : ${trueValueBinding==='true' ? `( ${value} )` : `_q(${value}, ${trueValueBinding})`}`);
	addHandler(el, 'change', `
		$event = { _: $event.target.checked, v: ${value} };
		if ( [].constructor.isArray($event.v) ) {
			$event._
				? _i($event.v, $event._ = ${modifiers && modifiers.number ? '_n' : ''}(${valueBinding}))<0
					? $event.v = [ ...$event.v, $event._ ]
					: $event = 0
				: ( $event._ = _i($event.v, ${modifiers && modifiers.number ? '_n' : ''}(${valueBinding})) )<0
					? $event = 0
					: --( $event.v = [ ...$event.v ] ).copyWithin($event._, $event._ + 1).length;
		}
		else { $event.v = $event.checked ? ( ${trueValueBinding} ) : ( ${falseValueBinding} ); }
		$event && ${genAssignmentCode(value, '$event.v')}`, null, true);
}
'''

var = '''
function genCheckboxModel (el, value, modifiers) {
	const valueBinding = getBindingAttr(el, 'value') || 'null';
	const trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
	const falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
	addProp(el, 'checked', `[].constructor.isArray(${value}) ? _i(${value}, ${valueBinding})>-1 : ${trueValueBinding==='true' ? `( ${value} )` : `_q(${value}, ${trueValueBinding})`}`);
	addHandler(el, 'change', `
		$event = { _: $event.target.checked, v: ${value}, l: 0 };
		if ( [].constructor.isArray($event.v) ) {
			if ( $event._ ) {
				_i($event.v, $event._ = ${modifiers && modifiers.number ? '_n' : ''}(${valueBinding}))<0
					? ( $event.v = $event.v.slice(), $event.v[$event.v.length] = $event._, $event.v )
					: $event = 0;
			}
			else {
				if ( ( $event._ = _i($event.v, ${modifiers && modifiers.number ? '_n' : ''}(${valueBinding})) )<0 ) { $event = 0; }
				else {
					$event.v = $event.v.slice();
					$event.l = $event.v.length - 1;
					while ( $event._<$event.l ) { $event.v[$event._] = $event.v[++$event._]; }
					$event.v.length = $event.l;
				}
			}
		}
		else { $event.v = $event.checked ? ( ${trueValueBinding} ) : ( ${falseValueBinding} ); }
		$event && ${genAssignmentCode(value, '$event.v')}`, null, true);
}
'''

[3]
