export default _;
declare const _ :{
	2 :{
		Select :{
			const :'function genSelect (el, value, modifiers) {\n	addHandler(el, \'change\', `\n		{\n			const VALUE = _value ?? \'_value\';\n			const { multiple, options } = $event.target;\n			if ( $event = multiple ? [] : void null ) {\n				let length = 0;\n				for ( const option of options ) {\n					if ( option.selected ) {\n						$event[length++] = ${modifiers && modifiers.number ? \'_n\' : \'\'}(VALUE in option ? option[VALUE] : option.value);\n					}\n				}\n			}\n			else {\n				for ( const option of options ) {\n					if ( option.selected ) {\n						$event           = ${modifiers && modifiers.number ? \'_n\' : \'\'}(VALUE in option ? option[VALUE] : option.value); break;\n					}\n				}\n			}\n		}\n		${genAssignmentCode(value, \'$event\')}`, null, true);\n}\n',
			var :'function genSelect (el, value, modifiers) {\n	addHandler(el, \'change\', `\n		$event = {\n			v: $event.target.multiple ? [] : void null,\n			i: 0,\n			s: $event.target.options,\n			$: 0,\n			_: _value || \'_value\',\n		};\n		if ( $event.v ) {\n			while ( $event.i<$event.s.length ) {\n				if ( ( $event.$ = $event.s[$event.i++] ).selected ) {\n					$event.v[$event.v.length] = ${modifiers && modifiers.number ? \'_n\' : \'\'}($event.$[$event._ in $event.$ ? $event._ : \'value\']);\n				}\n			}\n		}\n		else {\n			while ( $event.i<$event.s.length ) {\n				if ( ( $event.$ = $event.s[$event.i++] ).selected ) {\n					$event.v                         = ${modifiers && modifiers.number ? \'_n\' : \'\'}($event.$[$event._ in $event.$ ? $event._ : \'value\']); break;\n				}\n			}\n		}\n		${genAssignmentCode(value, \'$event.v\')}`, null, true);\n}\n',
		},
		CheckboxModel :{
			const :'function genCheckboxModel (el, value, modifiers) {\n	const valueBinding = getBindingAttr(el, \'value\') || \'null\';\n	const trueValueBinding = getBindingAttr(el, \'true-value\') || \'true\';\n	const falseValueBinding = getBindingAttr(el, \'false-value\') || \'false\';\n	addProp(el, \'checked\', `[].constructor.isArray(${value}) ? _i(${value}, ${valueBinding})>-1 : ${trueValueBinding===\'true\' ? `( ${value} )` : `_q(${value}, ${trueValueBinding})`}`);\n	addHandler(el, \'change\', `\n		$event = { _: $event.target.checked, v: ${value} };\n		if ( [].constructor.isArray($event.v) ) {\n			$event._\n				? _i($event.v, $event._ = ${modifiers && modifiers.number ? \'_n\' : \'\'}(${valueBinding}))<0\n					? $event.v = [ ...$event.v, $event._ ]\n					: $event = 0\n				: ( $event._ = _i($event.v, ${modifiers && modifiers.number ? \'_n\' : \'\'}(${valueBinding})) )<0\n					? $event = 0\n					: --( $event.v = [ ...$event.v ] ).copyWithin($event._, $event._ + 1).length;\n		}\n		else { $event.v = $event.checked ? ( ${trueValueBinding} ) : ( ${falseValueBinding} ); }\n		$event && ${genAssignmentCode(value, \'$event.v\')}`, null, true);\n}\n',
			var :'function genCheckboxModel (el, value, modifiers) {\n	const valueBinding = getBindingAttr(el, \'value\') || \'null\';\n	const trueValueBinding = getBindingAttr(el, \'true-value\') || \'true\';\n	const falseValueBinding = getBindingAttr(el, \'false-value\') || \'false\';\n	addProp(el, \'checked\', `[].constructor.isArray(${value}) ? _i(${value}, ${valueBinding})>-1 : ${trueValueBinding===\'true\' ? `( ${value} )` : `_q(${value}, ${trueValueBinding})`}`);\n	addHandler(el, \'change\', `\n		$event = { _: $event.target.checked, v: ${value}, l: 0 };\n		if ( [].constructor.isArray($event.v) ) {\n			if ( $event._ ) {\n				_i($event.v, $event._ = ${modifiers && modifiers.number ? \'_n\' : \'\'}(${valueBinding}))<0\n					? ( $event.v = $event.v.slice(), $event.v[$event.v.length] = $event._, $event.v )\n					: $event = 0;\n			}\n			else {\n				if ( ( $event._ = _i($event.v, ${modifiers && modifiers.number ? \'_n\' : \'\'}(${valueBinding})) )<0 ) { $event = 0; }\n				else {\n					$event.v = $event.v.slice();\n					$event.l = $event.v.length - 1;\n					while ( $event._<$event.l ) { $event.v[$event._] = $event.v[++$event._]; }\n					$event.v.length = $event.l;\n				}\n			}\n		}\n		else { $event.v = $event.checked ? ( ${trueValueBinding} ) : ( ${falseValueBinding} ); }\n		$event && ${genAssignmentCode(value, \'$event.v\')}`, null, true);\n}\n',
		},
	},
	3 :{},
};