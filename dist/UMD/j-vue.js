/*!
 * 模块名称：jVue
 * 模块功能：对 .vue 文件进行构建后的前端统一依赖。从属于“简计划”。
   　　　　　The unified dependency for built .vue files. Belong to "Plan J".
 * 模块版本：1.0.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-vue/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-vue/
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.jVue = factory());
}(this, (function () { 'use strict';

	var semver = [1, 0, 0];

	var create = window.Object.create;
	var Function = window.Function;
	var Error = window.Error;
	var document = window.document;

	var HEAD = document.documentElement.firstChild;

	var IDENTIFIERS = /--[a-z_]\w*--|__[a-z0-9$]+(?:_[a-z0-9$]+)*__/ig;

	//var RESERVED_WORDS = function (Set) {
	//	Set.prototype = create(null);
	//	return new Set;
	//}(function () {
	//	this.break = this.case = this.catch = this.class = this.const = this.continue = this.debugger = this.default = this.delete = this.do = this.else = this.enum = this.export = this.extends = this.finally = this.for = this.funciton = this.if = this.import = this.in = this.instanceof = this.let = this.new = this.return = this.try = this.super = this.switch = this.this = this.throw = this.typeof = this.var = this.void = this.while = this.with = null;
	//});

	var mapper = {
		0: '1', 1: '2', 2: '3', 3: '4', 4: '5', 5: '6', 6: '7', 7: '8', 8: '9', 9: 'a',
		a: 'b', b: 'c', c: 'd', d: 'e', e: 'f', f: 'g', g: 'h',
		h: 'i', i: 'j', j: 'k', k: 'l', l: 'm', m: 'n', n: 'o',
		o: 'p', p: 'q', q: 'r', r: 's', s: 't', t: 'u',
		u: 'v', v: 'w', w: 'x', x: 'y', y: 'z'
	};
	var identifierArray = ['9'];
	var identifierArray_lastItem = '9';
	var identifierArray_lastIndex = 0;

	function Identifier () {
		if ( identifierArray_lastItem==='z' ) {
			identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = '0';
			for ( var wIndex = identifierArray_lastIndex; ; ) {
				if ( wIndex ) {
					if ( identifierArray[--wIndex]==='z' ) { identifierArray[wIndex] = '0'; }
					else {
						identifierArray[wIndex] = mapper[identifierArray[wIndex]];
						break;
					}
				}
				else {
					identifierArray.unshift('a');
					++identifierArray_lastIndex;
					break;
				}
			}
		}
		else { identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = mapper[identifierArray_lastItem]; }
		return identifierArray.join('');
		//var identifierString = identifierArray.join('');
		//if ( identifierString in RESERVED_WORDS ) {
		//	identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = mapper[identifierArray_lastItem];
		//	identifierString = identifierArray.join('');
		//}
		//return identifierString;
	}

	function IdentifiersObject (IDs) {
		var index = IDs.length;
		while ( index ) {
			this[IDs[--index]] = Identifier();
		}
	}

	IdentifiersObject.prototype = create(null);

	function IdentifiersFunction () {
		var identifiers = create(null);
		return function (ID) {
			if ( ID in identifiers ) { return identifiers[ID]; }
			return identifiers[ID] = Identifier();
		};
	}

	function Scope (ID__ID) {
		return ID__ID ? new IdentifiersObject(ID__ID.split('--')) : IdentifiersFunction();
	}

	function Render (code, scope) {
		return Function(
			scope ?
				typeof scope==='function' ?
					code.replace(IDENTIFIERS, function (__ID__, ID) {
						return scope(ID);
					}) :
					code.replace(IDENTIFIERS, function (__ID__, ID) {
						if ( ID in scope ) { return scope[ID]; }
						throw new Error(__ID__);
					}) :
				code
		);
	}

	function StaticRenderFns (codes, scope) {
		var fns = [];
		var length = codes.length;
		var index = 0;
		if ( scope ) {
			if ( typeof scope==='function' ) {
				while ( index<length ) {
					fns.push(Function(codes[index].replace(IDENTIFIERS, function (__ID__, ID) {
						return scope(ID);
					})));
					++index;
				}
			}
			else {
				while ( index<length ) {
					fns.push(Function(codes[index].replace(IDENTIFIERS, function (__ID__, ID) {
						if ( ID in scope ) { return scope[ID]; }
						throw new Error(__ID__);
					})));
					++index;
				}
			}
		}
		else {
			while ( index<length ) {
				fns.push(Function(codes[index]));
				++index;
			}
		}
		return fns;
	}

	function Style (css, scope) {
		var style = document.createElement('style');
		if ( css ) {
			style.textContent =
				scope ?
					typeof scope==='function' ?
						css.replace(IDENTIFIERS, function (__ID__, ID) {
							return scope(ID);
						}) :
						css.replace(IDENTIFIERS, function (__ID__, ID) {
							if ( ID in scope ) { return scope[ID]; }
							throw new Error(__ID__);
						}) :
					css;
		}
		HEAD.appendChild(style);
		return style;
	}

	function remove (style) {
		HEAD.removeChild(style);
	}

	var jDoc = {
		semver: semver,
		Scope: Scope,
		Render: Render,
		StaticRenderFns: StaticRenderFns,
		Style: Style,
		remove: remove
	};

	jDoc.default = jDoc;

	return jDoc;

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,