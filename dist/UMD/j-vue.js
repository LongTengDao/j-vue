/*!
 * 模块名称：jVue
 * 模块功能：对 .vue 文件进行构建后的前端统一依赖。从属于“简计划”。
   　　　　　The unified dependency for built .vue files. Belong to "Plan J".
 * 模块版本：6.0.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-vue/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-vue/
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.jVue = factory());
}(this, function () { 'use strict';

	var version = '6.0.0';

	var isArray = Array.isArray;
	var create = Object.create;
	var head = document.documentElement.firstChild;
	var NULL = Object.freeze(Object.create(null));
	var IDENTIFIERS = /--[a-z][a-z0-9]*(?:_[a-z0-9]+)*--|__[a-z][a-z0-9]*(?:_[a-z0-9]+)*__/ig;
	var mapper = {
		0: '1', 1: '2', 2: '3', 3: '4', 4: '5', 5: '6', 6: '7', 7: '8', 8: '9', 9: 'a',
		a: 'b', b: 'c', c: 'd', d: 'e', e: 'f', f: 'g', g: 'h',
		h: 'i', i: 'j', j: 'k', k: 'l', l: 'm', m: 'n', n: 'o',
		o: 'p', p: 'q', q: 'r', r: 's', s: 't', t: 'u',
		u: 'v', v: 'w', w: 'x', x: 'y', y: 'z'
	};
	var identifierArray = ['9'];
	var identifierArray_lastItem = '9';
	var identifierArray_lastIndex = 0;

	function Identifier () {
		if ( identifierArray_lastItem==='z' ) {
			identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = '0';
			for ( var wIndex = identifierArray_lastIndex; ; ) {
				if ( wIndex ) {
					if ( identifierArray[--wIndex]==='z' ) { identifierArray[wIndex] = '0'; }
					else {
						identifierArray[wIndex] = mapper[identifierArray[wIndex]];
						break;
					}
				}
				else {
					identifierArray.unshift('a');
					++identifierArray_lastIndex;
					break;
				}
			}
		}
		else { identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = mapper[identifierArray_lastItem]; }
		/*
		switch ( identifierArray.join('') ) {
			case 'break':
			case 'case':
			case 'catch':
			case 'class':// ES 6
			case 'const':// ES 6
			case 'continue':
			case 'debugger':
			case 'default':
			case 'delete':
			case 'do':
			case 'else':
			case 'enum'://
			case 'export':// ES 6
			case 'extends':// ES 6
			case 'finally':
			case 'for':
			case 'function':
			case 'if':
			case 'import':// ES 6
			case 'in':
			case 'instanceof':
			case 'new':
			case 'return':
			case 'switch':
			case 'super':// ES 6
			case 'this':
			case 'throw':
			case 'try':
			case 'typeof':
			case 'var':
			case 'void':
			case 'while':
			case 'with':
				identifierArray_lastItem = identifierArray[identifierArray_lastIndex] = mapper[identifierArray_lastItem];
		}
		*/
		return identifierArray.join('');
	}

	function IdentifiersObject (IDs) {
		for ( var index = IDs.length; index; ) {
			this[IDs[--index]] = Identifier();
		}
	}

	IdentifiersObject.prototype = NULL;

	function IdentifiersObjectExtended (IDs) {
		for ( var index = IDs.length; index; ) {
			this[IDs[--index]] = Identifier();
		}
		IdentifiersObjectExtended.prototype = NULL;
	}

	function IdentifiersFunction (cache) {
		return function scope (ID) {
			if ( ID in cache ) { return cache[ID]; }
			return cache[ID] = Identifier();
		};
	}

	function mix (protos) {
		var scope = create(null);
		for ( var length = protos.length, index = 0; index<length; ++index ) {
			var proto = protos[index];
			for ( var id in proto ) { scope[id] = proto[id]; }
		}
		return scope;
	}

	function Scope (ID__ID) {
		if ( ID__ID ) {
			if ( isArray(this) ) { IdentifiersObjectExtended.prototype = mix(this); }
			else if ( this instanceof IdentifiersObject ) { IdentifiersObjectExtended.prototype = this; }
			else { return new IdentifiersObject(ID__ID.split('--')); }
			return new IdentifiersObjectExtended(ID__ID.split('--'));
		}
		return IdentifiersFunction(isArray(this) ? mix(this) : create(this instanceof IdentifiersObject ? this : null));
	}

	Scope.prototype = NULL;
	Object.freeze(Scope);

	function Replacer (scope) {
		return typeof scope==='function' ?
			function (__ID__) { return scope(__ID__.slice(2, -2)); } :
			function (__ID__) {
				var ID = __ID__.slice(2, -2);
				if ( ID in scope ) { return scope[ID]; }
				throw new Error(__ID__);
			};
	}

	function RenderFn (code) {
		return Function('with(this){return '+code+'}');
	}

	function Render (code, scope) {
		return RenderFn(scope
			? code.replace(IDENTIFIERS, Replacer(scope))
			: code
		);
	}

	function StaticRenderFns (codes, scope) {
		var fns = [];
		var length = codes.length;
		var index = 0;
		if ( scope ) {
			var replacer = Replacer(scope);
			while ( index<length ) {
				fns.push(RenderFn(codes[index].replace(IDENTIFIERS, replacer)));
				++index;
			}
		}
		else {
			while ( index<length ) {
				fns.push(RenderFn(codes[index]));
				++index;
			}
		}
		return fns;
	}

	var STYLE = Object.create(null, {
		functional: { configurable: false, enumerable: true, writable: false, value:
			true
		},
		render: { configurable: false, enumerable: true, writable: false, value:
			function render (createElement, context) { return createElement('style', context.data, context.children); }
		}
	});

	function Style (css, scope) {
		var style = document.createElement('style');
		if ( css ) {
			style.textContent = scope
				? css.replace(IDENTIFIERS, Replacer(scope))
				: css;
		}
		head.appendChild(style);
		return style;
	}

	function remove (style) {
		head.removeChild(style);
		return remove;
	}

	var jDoc = {
		Scope: Scope,
		Render: Render,
		StaticRenderFns: StaticRenderFns,
		STYLE: STYLE,
		Style: Style,
		remove: remove,
		version: version
	};
	jDoc.default = jDoc;
	Object.freeze(jDoc);

	return jDoc;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnNpb24/dGV4dCIsImV4cG9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnNi4wLjAnOyIsImltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbj90ZXh0JztcbmV4cG9ydCB7IHZlcnNpb24gfTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgaGVhZCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5maXJzdENoaWxkO1xudmFyIE5VTEwgPSBPYmplY3QuZnJlZXplKE9iamVjdC5jcmVhdGUobnVsbCkpO1xudmFyIElERU5USUZJRVJTID0gLy0tW2Etel1bYS16MC05XSooPzpfW2EtejAtOV0rKSotLXxfX1thLXpdW2EtejAtOV0qKD86X1thLXowLTldKykqX18vaWc7XG52YXIgbWFwcGVyID0ge1xuXHQwOiAnMScsIDE6ICcyJywgMjogJzMnLCAzOiAnNCcsIDQ6ICc1JywgNTogJzYnLCA2OiAnNycsIDc6ICc4JywgODogJzknLCA5OiAnYScsXG5cdGE6ICdiJywgYjogJ2MnLCBjOiAnZCcsIGQ6ICdlJywgZTogJ2YnLCBmOiAnZycsIGc6ICdoJyxcblx0aDogJ2knLCBpOiAnaicsIGo6ICdrJywgazogJ2wnLCBsOiAnbScsIG06ICduJywgbjogJ28nLFxuXHRvOiAncCcsIHA6ICdxJywgcTogJ3InLCByOiAncycsIHM6ICd0JywgdDogJ3UnLFxuXHR1OiAndicsIHY6ICd3JywgdzogJ3gnLCB4OiAneScsIHk6ICd6J1xufTtcbnZhciBpZGVudGlmaWVyQXJyYXkgPSBbJzknXTtcbnZhciBpZGVudGlmaWVyQXJyYXlfbGFzdEl0ZW0gPSAnOSc7XG52YXIgaWRlbnRpZmllckFycmF5X2xhc3RJbmRleCA9IDA7XG5cbmZ1bmN0aW9uIElkZW50aWZpZXIgKCkge1xuXHRpZiAoIGlkZW50aWZpZXJBcnJheV9sYXN0SXRlbT09PSd6JyApIHtcblx0XHRpZGVudGlmaWVyQXJyYXlfbGFzdEl0ZW0gPSBpZGVudGlmaWVyQXJyYXlbaWRlbnRpZmllckFycmF5X2xhc3RJbmRleF0gPSAnMCc7XG5cdFx0Zm9yICggdmFyIHdJbmRleCA9IGlkZW50aWZpZXJBcnJheV9sYXN0SW5kZXg7IDsgKSB7XG5cdFx0XHRpZiAoIHdJbmRleCApIHtcblx0XHRcdFx0aWYgKCBpZGVudGlmaWVyQXJyYXlbLS13SW5kZXhdPT09J3onICkgeyBpZGVudGlmaWVyQXJyYXlbd0luZGV4XSA9ICcwJzsgfVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRpZGVudGlmaWVyQXJyYXlbd0luZGV4XSA9IG1hcHBlcltpZGVudGlmaWVyQXJyYXlbd0luZGV4XV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZGVudGlmaWVyQXJyYXkudW5zaGlmdCgnYScpO1xuXHRcdFx0XHQrK2lkZW50aWZpZXJBcnJheV9sYXN0SW5kZXg7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRlbHNlIHsgaWRlbnRpZmllckFycmF5X2xhc3RJdGVtID0gaWRlbnRpZmllckFycmF5W2lkZW50aWZpZXJBcnJheV9sYXN0SW5kZXhdID0gbWFwcGVyW2lkZW50aWZpZXJBcnJheV9sYXN0SXRlbV07IH1cblx0Lypcblx0c3dpdGNoICggaWRlbnRpZmllckFycmF5LmpvaW4oJycpICkge1xuXHRcdGNhc2UgJ2JyZWFrJzpcblx0XHRjYXNlICdjYXNlJzpcblx0XHRjYXNlICdjYXRjaCc6XG5cdFx0Y2FzZSAnY2xhc3MnOi8vIEVTIDZcblx0XHRjYXNlICdjb25zdCc6Ly8gRVMgNlxuXHRcdGNhc2UgJ2NvbnRpbnVlJzpcblx0XHRjYXNlICdkZWJ1Z2dlcic6XG5cdFx0Y2FzZSAnZGVmYXVsdCc6XG5cdFx0Y2FzZSAnZGVsZXRlJzpcblx0XHRjYXNlICdkbyc6XG5cdFx0Y2FzZSAnZWxzZSc6XG5cdFx0Y2FzZSAnZW51bSc6Ly9cblx0XHRjYXNlICdleHBvcnQnOi8vIEVTIDZcblx0XHRjYXNlICdleHRlbmRzJzovLyBFUyA2XG5cdFx0Y2FzZSAnZmluYWxseSc6XG5cdFx0Y2FzZSAnZm9yJzpcblx0XHRjYXNlICdmdW5jdGlvbic6XG5cdFx0Y2FzZSAnaWYnOlxuXHRcdGNhc2UgJ2ltcG9ydCc6Ly8gRVMgNlxuXHRcdGNhc2UgJ2luJzpcblx0XHRjYXNlICdpbnN0YW5jZW9mJzpcblx0XHRjYXNlICduZXcnOlxuXHRcdGNhc2UgJ3JldHVybic6XG5cdFx0Y2FzZSAnc3dpdGNoJzpcblx0XHRjYXNlICdzdXBlcic6Ly8gRVMgNlxuXHRcdGNhc2UgJ3RoaXMnOlxuXHRcdGNhc2UgJ3Rocm93Jzpcblx0XHRjYXNlICd0cnknOlxuXHRcdGNhc2UgJ3R5cGVvZic6XG5cdFx0Y2FzZSAndmFyJzpcblx0XHRjYXNlICd2b2lkJzpcblx0XHRjYXNlICd3aGlsZSc6XG5cdFx0Y2FzZSAnd2l0aCc6XG5cdFx0XHRpZGVudGlmaWVyQXJyYXlfbGFzdEl0ZW0gPSBpZGVudGlmaWVyQXJyYXlbaWRlbnRpZmllckFycmF5X2xhc3RJbmRleF0gPSBtYXBwZXJbaWRlbnRpZmllckFycmF5X2xhc3RJdGVtXTtcblx0fVxuXHQqL1xuXHRyZXR1cm4gaWRlbnRpZmllckFycmF5LmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBJZGVudGlmaWVyc09iamVjdCAoSURzKSB7XG5cdGZvciAoIHZhciBpbmRleCA9IElEcy5sZW5ndGg7IGluZGV4OyApIHtcblx0XHR0aGlzW0lEc1stLWluZGV4XV0gPSBJZGVudGlmaWVyKCk7XG5cdH1cbn1cblxuSWRlbnRpZmllcnNPYmplY3QucHJvdG90eXBlID0gTlVMTDtcblxuZnVuY3Rpb24gSWRlbnRpZmllcnNPYmplY3RFeHRlbmRlZCAoSURzKSB7XG5cdGZvciAoIHZhciBpbmRleCA9IElEcy5sZW5ndGg7IGluZGV4OyApIHtcblx0XHR0aGlzW0lEc1stLWluZGV4XV0gPSBJZGVudGlmaWVyKCk7XG5cdH1cblx0SWRlbnRpZmllcnNPYmplY3RFeHRlbmRlZC5wcm90b3R5cGUgPSBOVUxMO1xufVxuXG5mdW5jdGlvbiBJZGVudGlmaWVyc0Z1bmN0aW9uIChjYWNoZSkge1xuXHRyZXR1cm4gZnVuY3Rpb24gc2NvcGUgKElEKSB7XG5cdFx0aWYgKCBJRCBpbiBjYWNoZSApIHsgcmV0dXJuIGNhY2hlW0lEXTsgfVxuXHRcdHJldHVybiBjYWNoZVtJRF0gPSBJZGVudGlmaWVyKCk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIG1peCAocHJvdG9zKSB7XG5cdHZhciBzY29wZSA9IGNyZWF0ZShudWxsKTtcblx0Zm9yICggdmFyIGxlbmd0aCA9IHByb3Rvcy5sZW5ndGgsIGluZGV4ID0gMDsgaW5kZXg8bGVuZ3RoOyArK2luZGV4ICkge1xuXHRcdHZhciBwcm90byA9IHByb3Rvc1tpbmRleF07XG5cdFx0Zm9yICggdmFyIGlkIGluIHByb3RvICkgeyBzY29wZVtpZF0gPSBwcm90b1tpZF07IH1cblx0fVxuXHRyZXR1cm4gc2NvcGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTY29wZSAoSURfX0lEKSB7XG5cdGlmICggSURfX0lEICkge1xuXHRcdGlmICggaXNBcnJheSh0aGlzKSApIHsgSWRlbnRpZmllcnNPYmplY3RFeHRlbmRlZC5wcm90b3R5cGUgPSBtaXgodGhpcyk7IH1cblx0XHRlbHNlIGlmICggdGhpcyBpbnN0YW5jZW9mIElkZW50aWZpZXJzT2JqZWN0ICkgeyBJZGVudGlmaWVyc09iamVjdEV4dGVuZGVkLnByb3RvdHlwZSA9IHRoaXM7IH1cblx0XHRlbHNlIHsgcmV0dXJuIG5ldyBJZGVudGlmaWVyc09iamVjdChJRF9fSUQuc3BsaXQoJy0tJykpOyB9XG5cdFx0cmV0dXJuIG5ldyBJZGVudGlmaWVyc09iamVjdEV4dGVuZGVkKElEX19JRC5zcGxpdCgnLS0nKSk7XG5cdH1cblx0cmV0dXJuIElkZW50aWZpZXJzRnVuY3Rpb24oaXNBcnJheSh0aGlzKSA/IG1peCh0aGlzKSA6IGNyZWF0ZSh0aGlzIGluc3RhbmNlb2YgSWRlbnRpZmllcnNPYmplY3QgPyB0aGlzIDogbnVsbCkpO1xufVxuXG5TY29wZS5wcm90b3R5cGUgPSBOVUxMO1xuT2JqZWN0LmZyZWV6ZShTY29wZSk7XG5cbmZ1bmN0aW9uIFJlcGxhY2VyIChzY29wZSkge1xuXHRyZXR1cm4gdHlwZW9mIHNjb3BlPT09J2Z1bmN0aW9uJyA/XG5cdFx0ZnVuY3Rpb24gKF9fSURfXykgeyByZXR1cm4gc2NvcGUoX19JRF9fLnNsaWNlKDIsIC0yKSk7IH0gOlxuXHRcdGZ1bmN0aW9uIChfX0lEX18pIHtcblx0XHRcdHZhciBJRCA9IF9fSURfXy5zbGljZSgyLCAtMik7XG5cdFx0XHRpZiAoIElEIGluIHNjb3BlICkgeyByZXR1cm4gc2NvcGVbSURdOyB9XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoX19JRF9fKTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBSZW5kZXJGbiAoY29kZSkge1xuXHRyZXR1cm4gRnVuY3Rpb24oJ3dpdGgodGhpcyl7cmV0dXJuICcrY29kZSsnfScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyIChjb2RlLCBzY29wZSkge1xuXHRyZXR1cm4gUmVuZGVyRm4oc2NvcGVcblx0XHQ/IGNvZGUucmVwbGFjZShJREVOVElGSUVSUywgUmVwbGFjZXIoc2NvcGUpKVxuXHRcdDogY29kZVxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3RhdGljUmVuZGVyRm5zIChjb2Rlcywgc2NvcGUpIHtcblx0dmFyIGZucyA9IFtdO1xuXHR2YXIgbGVuZ3RoID0gY29kZXMubGVuZ3RoO1xuXHR2YXIgaW5kZXggPSAwO1xuXHRpZiAoIHNjb3BlICkge1xuXHRcdHZhciByZXBsYWNlciA9IFJlcGxhY2VyKHNjb3BlKTtcblx0XHR3aGlsZSAoIGluZGV4PGxlbmd0aCApIHtcblx0XHRcdGZucy5wdXNoKFJlbmRlckZuKGNvZGVzW2luZGV4XS5yZXBsYWNlKElERU5USUZJRVJTLCByZXBsYWNlcikpKTtcblx0XHRcdCsraW5kZXg7XG5cdFx0fVxuXHR9XG5cdGVsc2Uge1xuXHRcdHdoaWxlICggaW5kZXg8bGVuZ3RoICkge1xuXHRcdFx0Zm5zLnB1c2goUmVuZGVyRm4oY29kZXNbaW5kZXhdKSk7XG5cdFx0XHQrK2luZGV4O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm5zO1xufVxuXG5leHBvcnQgdmFyIFNUWUxFID0gT2JqZWN0LmNyZWF0ZShudWxsLCB7XG5cdGZ1bmN0aW9uYWw6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTpcblx0XHR0cnVlXG5cdH0sXG5cdHJlbmRlcjogeyBjb25maWd1cmFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogZmFsc2UsIHZhbHVlOlxuXHRcdGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCwgY29udGV4dCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBjb250ZXh0LmRhdGEsIGNvbnRleHQuY2hpbGRyZW4pOyB9XG5cdH1cbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gU3R5bGUgKGNzcywgc2NvcGUpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0aWYgKCBjc3MgKSB7XG5cdFx0c3R5bGUudGV4dENvbnRlbnQgPSBzY29wZVxuXHRcdFx0PyBjc3MucmVwbGFjZShJREVOVElGSUVSUywgUmVwbGFjZXIoc2NvcGUpKVxuXHRcdFx0OiBjc3M7XG5cdH1cblx0aGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdHJldHVybiBzdHlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZSAoc3R5bGUpIHtcblx0aGVhZC5yZW1vdmVDaGlsZChzdHlsZSk7XG5cdHJldHVybiByZW1vdmU7XG59XG5cbnZhciBqRG9jID0ge1xuXHRTY29wZTogU2NvcGUsXG5cdFJlbmRlcjogUmVuZGVyLFxuXHRTdGF0aWNSZW5kZXJGbnM6IFN0YXRpY1JlbmRlckZucyxcblx0U1RZTEU6IFNUWUxFLFxuXHRTdHlsZTogU3R5bGUsXG5cdHJlbW92ZTogcmVtb3ZlLFxuXHR2ZXJzaW9uOiB2ZXJzaW9uXG59O1xuakRvYy5kZWZhdWx0ID0gakRvYztcbk9iamVjdC5mcmVlemUoakRvYyk7XG5leHBvcnQgZGVmYXVsdCBqRG9jO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZUFBZSxPQUFPOzt1QkFBQyx0QkNHdkIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztDQUM1QixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0NBQzNCLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO0NBQy9DLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzlDLElBQUksV0FBVyxHQUFHLHVFQUF1RSxDQUFDO0NBQzFGLElBQUksTUFBTSxHQUFHO0NBQ2IsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztDQUMvRSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHO0NBQ3ZELENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxF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