/*!
 * 模块名称：jVue
 * 模块功能：对 .vue 文件进行构建后的前端统一依赖。从属于“简计划”。
   　　　　　The unified dependency for built .vue files. Belong to "Plan J".
 * 模块版本：7.3.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-vue/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-vue/
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.jVue = factory());
}(this, function () { 'use strict';

    var version = '7.3.0';

    var dictionary = {
        0: '1', 1: '2', 2: '3', 3: '4', 4: '5', 5: '6', 6: '7', 7: '8', 8: '9', 9: 'a',
        a: 'b', b: 'c', c: 'd', d: 'e', e: 'f', f: 'g', g: 'h',
        h: 'i', i: 'j', j: 'k', k: 'l', l: 'm', m: 'n', n: 'o',
        o: 'p', p: 'q', q: 'r', r: 's', s: 't', t: 'u',
        u: 'v', v: 'w', w: 'x', x: 'y', y: 'z'
    };
    var latestIdentifierCharacters = ['9'];
    var latestIdentifierCharacters_lastCharacter = '9';
    var latestIdentifierCharacters_lastCharacterIndex = 0;
    //var RESERVED_KEY :RegExp = /^(?:break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:e(?:bugger|fault|lete)|o)|e(?:lse|num|x(?:port|tends))|f(?:inally|or|unction)|i(?:f|mport|n(?:stanceof)?)|new|return|s(?:witch|super)|t(?:ry|ypeof)|v(?:ar|oid)|w(?:hile|ith))$/;
    function Identifier() {
        if (latestIdentifierCharacters_lastCharacter === 'z') {
            latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = '0';
            for (var characterIndex = latestIdentifierCharacters_lastCharacterIndex;;) {
                if (characterIndex) {
                    if (latestIdentifierCharacters[--characterIndex] === 'z') {
                        latestIdentifierCharacters[characterIndex] = '0';
                    }
                    else {
                        latestIdentifierCharacters[characterIndex] = dictionary[latestIdentifierCharacters[characterIndex]];
                        break;
                    }
                }
                else {
                    latestIdentifierCharacters.unshift('a');
                    ++latestIdentifierCharacters_lastCharacterIndex;
                    break;
                }
            }
        }
        else {
            latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = dictionary[latestIdentifierCharacters_lastCharacter];
        }
        //var identifier :string = latestIdentifierCharacters.join('');
        //if ( RESERVED_KEY.test(identifier) ) {
        //	latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = dictionary[latestIdentifierCharacters_lastCharacter];
        //	return latestIdentifierCharacters.join('');
        //}
        //return identifier;
        return latestIdentifierCharacters.join('');
    }

    /*!
     * 模块名称：@ltd/j-groupify
     * 模块功能：将一个字符串数组，转化为分支式优化后的正则表达式匹配组。
       　　　　　Transform a string array into a branch-style optimized regExp group.
     * 模块版本：3.0.0
     * 许可条款：LGPL-3.0
     * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
     * 问题反馈：https://GitHub.com/LongTengDao/j-groupify/issues
     * 项目主页：https://GitHub.com/LongTengDao/j-groupify/
     */

    // @ts-ignore
    var create = Object.create;
    function appendBranch(group, key, uFlag) {
        if (key) {
            uFlag && key.codePointAt(0) !== key.charCodeAt(0)
                ? appendBranch(group[key.slice(0, 2)] || (group[key.slice(0, 2)] = create(null)), key.slice(2), true)
                : appendBranch(group[key.charAt(0)] || (group[key.charAt(0)] = create(null)), key.slice(1), false);
        }
    }
    function sourcify(group, needEscape) {
        var branches = [];
        var singleCharactersBranch = [];
        for (var char in group) {
            var sub_branches = sourcify(group[char], needEscape);
            if (needEscape) {
                switch (char) {
                    case '*':
                    case '+':
                    case '?':
                    case '^':
                    case '$':
                    case '(':
                    case ')':
                    case '[':
                    case ']':
                    case '{':
                    case '|':
                    case '-':
                    case '.':
                    case '\\':
                        char = '\\' + char;
                }
            }
            sub_branches ? branches.push(char + sub_branches) : singleCharactersBranch.push(char);
        }
        singleCharactersBranch.length && branches.unshift(singleCharactersBranch.length === 1 ? singleCharactersBranch[0] : '[' + singleCharactersBranch.join('') + ']');
        return branches.length === 0 ? '' : branches.length === 1 ? branches[0] : '(?:' + branches.join('|') + ')';
    }
    function groupify(branches, uFlag, noEscape) {
        var group = create(null);
        for (var length = branches.length, index = 0; index < length; ++index) {
            appendBranch(group, branches[index], uFlag);
        }
        return sourcify(group, !noEscape);
    }

    /*¡ @ltd/j-groupify */

    var undefined$1;
    var isArray = Array.isArray;
    var create$1 = Object.create;
    var SEARCH = /__[a-z][a-z0-9]*(?:_[a-z0-9]+)*__/ig;
    var NULL = Object.freeze(Object.create(null));
    ObjectScope.prototype = NULL;
    function Scope(keys) {
        if (keys === undefined$1) {
            return FunctionScope(isArray(this) ? mix(this) : create$1(this instanceof ObjectScope ? this : null));
        }
        var proto;
        if (isArray(this)) {
            proto = mix(this);
        }
        else if (this instanceof ObjectScope) {
            proto = this;
        }
        else {
            return new ObjectScope(keys.split('|'));
        }
        InheritedObjectScope.prototype = proto;
        return new InheritedObjectScope(keys.split('|'), proto);
    }
    function mix(protos) {
        var scope = create$1(null);
        for (var length = protos.length, index = 0; index < length; ++index) {
            var proto = protos[index];
            for (var id in proto) {
                scope[id] = proto[id];
            }
        }
        return scope;
    }
    function FunctionScope(cache) {
        function scope(key) { return cache[key] || (cache[key] = Identifier()); }
        scope._ = function (string) { return string.replace(SEARCH, replacer); };
        function replacer(__key__) { return scope(__key__.slice(2, -2)); }
        return scope;
    }
    function ObjectScope(keys) {
        this._ = function (string) { return string.replace(search, replacer); };
        var search = Search(keys);
        var replacer = Replacer(this);
        for (var index = keys.length; index;) {
            this[keys[--index]] = Identifier();
        }
    }
    function InheritedObjectScope(keys, proto) {
        this._ = function (string) { return string.replace(search, replacer); };
        for (var index = keys.length; index;) {
            this[keys[--index]] = Identifier();
        }
        for (var key in proto) {
            key === '_' || keys.push(key);
        }
        var search = Search(keys);
        var replacer = Replacer(this);
        InheritedObjectScope.prototype = NULL;
    }
    function Search(keys) {
        return new RegExp('__' + groupify(keys, false, true) + '__', 'g');
    }
    function Replacer(scope) {
        return function replacer(__key__) { return scope[__key__.slice(2, -2)]; };
    }

    function Template(html, scope) {
        return scope._(html);
    }
    function Render(code, scope) {
        return Function('with(this){return ' + (scope ? scope._(code) : code) + '}');
    }
    function StaticRenderFns(codes, scope) {
        return Function('return[function(){with(this){return ' + (scope
            ? scope._(codes.join('}},function(){with(this){return '))
            : codes.join('}},function(){with(this){return ')) + '}}]')();
    }

    var STYLE = Object.create(null, {
        functional: { configurable: false, enumerable: true, writable: false, value: true
        },
        render: { configurable: false, enumerable: true, writable: false, value: function render(createElement, context) {
                return createElement('style', context.data, context.children);
            }
        }
    });

    var head = document.documentElement.firstChild;
    function Style(css, scope) {
        var style = document.createElement('style');
        if (css) {
            style.textContent = scope ? scope._(css) : css;
        }
        return head.appendChild(style);
    }
    function remove(style) {
        head.removeChild(style);
        return remove;
    }

    // @ts-ignore
    var jVue = Object.create(null, {
        Identifier: { configurable: false, writable: false, value: Identifier },
        Scope: { configurable: false, writable: false, value: Scope },
        Template: { configurable: false, writable: false, value: Template },
        Render: { configurable: false, writable: false, value: Render },
        StaticRenderFns: { configurable: false, writable: false, value: StaticRenderFns },
        STYLE: { configurable: false, writable: false, value: STYLE },
        Style: { configurable: false, writable: false, value: Style },
        remove: { configurable: false, writable: false, value: remove },
        version: { configurable: false, writable: false, value: version },
        default: { configurable: false, get: function () { return this; } }
    });

    return jVue;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnNpb24/dGV4dCIsIklkZW50aWZpZXIudHMiLCIuLi8uLi9qLWdyb3VwaWZ5L2Rpc3QvRVNNL2otZ3JvdXBpZnkuanMiLCJTY29wZS50cyIsIlRlbXBsYXRlLFJlbmRlcixTdGF0aWNSZW5kZXJGbnMudHMiLCJTVFlMRS50cyIsIlN0eWxlLHJlbW92ZS50cyIsImV4cG9ydC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnNy4zLjAnOyIsInZhciBkaWN0aW9uYXJ5ID0ge1xuICAgIDA6ICcxJywgMTogJzInLCAyOiAnMycsIDM6ICc0JywgNDogJzUnLCA1OiAnNicsIDY6ICc3JywgNzogJzgnLCA4OiAnOScsIDk6ICdhJyxcbiAgICBhOiAnYicsIGI6ICdjJywgYzogJ2QnLCBkOiAnZScsIGU6ICdmJywgZjogJ2cnLCBnOiAnaCcsXG4gICAgaDogJ2knLCBpOiAnaicsIGo6ICdrJywgazogJ2wnLCBsOiAnbScsIG06ICduJywgbjogJ28nLFxuICAgIG86ICdwJywgcDogJ3EnLCBxOiAncicsIHI6ICdzJywgczogJ3QnLCB0OiAndScsXG4gICAgdTogJ3YnLCB2OiAndycsIHc6ICd4JywgeDogJ3knLCB5OiAneidcbn07XG52YXIgbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnMgPSBbJzknXTtcbnZhciBsYXRlc3RJZGVudGlmaWVyQ2hhcmFjdGVyc19sYXN0Q2hhcmFjdGVyID0gJzknO1xudmFyIGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzX2xhc3RDaGFyYWN0ZXJJbmRleCA9IDA7XG4vL3ZhciBSRVNFUlZFRF9LRVkgOlJlZ0V4cCA9IC9eKD86YnJlYWt8Yyg/OmEoPzpzZXx0Y2gpfGxhc3N8b24oPzpzdHx0aW51ZSkpfGQoPzplKD86YnVnZ2VyfGZhdWx0fGxldGUpfG8pfGUoPzpsc2V8bnVtfHgoPzpwb3J0fHRlbmRzKSl8Zig/OmluYWxseXxvcnx1bmN0aW9uKXxpKD86ZnxtcG9ydHxuKD86c3RhbmNlb2YpPyl8bmV3fHJldHVybnxzKD86d2l0Y2h8c3VwZXIpfHQoPzpyeXx5cGVvZil8dig/OmFyfG9pZCl8dyg/OmhpbGV8aXRoKSkkLztcbmV4cG9ydCBmdW5jdGlvbiBJZGVudGlmaWVyKCkge1xuICAgIGlmIChsYXRlc3RJZGVudGlmaWVyQ2hhcmFjdGVyc19sYXN0Q2hhcmFjdGVyID09PSAneicpIHtcbiAgICAgICAgbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3RlciA9IGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzW2xhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzX2xhc3RDaGFyYWN0ZXJJbmRleF0gPSAnMCc7XG4gICAgICAgIGZvciAodmFyIGNoYXJhY3RlckluZGV4ID0gbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3RlckluZGV4OzspIHtcbiAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXRlc3RJZGVudGlmaWVyQ2hhcmFjdGVyc1stLWNoYXJhY3RlckluZGV4XSA9PT0gJ3onKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzW2NoYXJhY3RlckluZGV4XSA9ICcwJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzW2NoYXJhY3RlckluZGV4XSA9IGRpY3Rpb25hcnlbbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNbY2hhcmFjdGVySW5kZXhdXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnMudW5zaGlmdCgnYScpO1xuICAgICAgICAgICAgICAgICsrbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3RlckluZGV4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsYXRlc3RJZGVudGlmaWVyQ2hhcmFjdGVyc19sYXN0Q2hhcmFjdGVyID0gbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNbbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3RlckluZGV4XSA9IGRpY3Rpb25hcnlbbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3Rlcl07XG4gICAgfVxuICAgIC8vdmFyIGlkZW50aWZpZXIgOnN0cmluZyA9IGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzLmpvaW4oJycpO1xuICAgIC8vaWYgKCBSRVNFUlZFRF9LRVkudGVzdChpZGVudGlmaWVyKSApIHtcbiAgICAvL1x0bGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnNfbGFzdENoYXJhY3RlciA9IGxhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzW2xhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzX2xhc3RDaGFyYWN0ZXJJbmRleF0gPSBkaWN0aW9uYXJ5W2xhdGVzdElkZW50aWZpZXJDaGFyYWN0ZXJzX2xhc3RDaGFyYWN0ZXJdO1xuICAgIC8vXHRyZXR1cm4gbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnMuam9pbignJyk7XG4gICAgLy99XG4gICAgLy9yZXR1cm4gaWRlbnRpZmllcjtcbiAgICByZXR1cm4gbGF0ZXN0SWRlbnRpZmllckNoYXJhY3RlcnMuam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa2xrWlc1MGFXWnBaWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNTVUZCU1N4VlFVRlZMRWRCUVZjN1NVRkRlRUlzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVYzdTVUZET1VVc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVjN1NVRkRkRVFzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVWM3U1VGRGRFUXNRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSE8wbEJRemxETEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVYzdRMEZEZEVNc1EwRkJRenRCUVVWR0xFbEJRVWtzTUVKQlFUQkNMRWRCUVdFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5xUkN4SlFVRkpMSGREUVVGM1F5eEhRVUZYTEVkQlFVY3NRMEZCUXp0QlFVTXpSQ3hKUVVGSkxEWkRRVUUyUXl4SFFVRlhMRU5CUVVNc1EwRkJRenRCUVVVNVJDeHJVVUZCYTFFN1FVRkZiRkVzVFVGQlRTeFZRVUZWTEZWQlFWVTdTVUZGZWtJc1NVRkJTeXgzUTBGQmQwTXNTMEZCUnl4SFFVRkhMRVZCUVVjN1VVRkRja1FzZDBOQlFYZERMRWRCUVVjc01FSkJRVEJDTEVOQlFVTXNOa05CUVRaRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZETTBnc1MwRkJUU3hKUVVGSkxHTkJRV01zUjBGQlZ5dzJRMEZCTmtNc1NVRkJUVHRaUVVOeVJpeEpRVUZMTEdOQlFXTXNSVUZCUnp0blFrRkRja0lzU1VGQlN5d3dRa0ZCTUVJc1EwRkJReXhGUVVGRkxHTkJRV01zUTBGQlF5eExRVUZITEVkQlFVY3NSVUZCUnp0dlFrRkRla1FzTUVKQlFUQkNMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzJsQ1FVTnFSRHR4UWtGRFNUdHZRa0ZEU2l3d1FrRkJNRUlzUTBGQlF5eGpRVUZqTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRGNFY3NUVUZCVFR0cFFrRkRUanRoUVVORU8ybENRVU5KTzJkQ1FVTktMREJDUVVFd1FpeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRuUWtGRGVFTXNSVUZCUlN3MlEwRkJOa01zUTBGQlF6dG5Ra0ZEYUVRc1RVRkJUVHRoUVVOT08xTkJRMFE3UzBGRFJEdFRRVU5KTzFGQlEwb3NkME5CUVhkRExFZEJRVWNzTUVKQlFUQkNMRU5CUVVNc05rTkJRVFpETEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc2QwTkJRWGRETEVOQlFVTXNRMEZCUXp0TFFVTTFTenRKUVVWRUxDdEVRVUVyUkR0SlFVTXZSQ3gzUTBGQmQwTTdTVUZEZUVNc0swdEJRU3RMTzBsQlF5OUxMRGhEUVVFNFF6dEpRVU01UXl4SFFVRkhPMGxCUTBnc2IwSkJRVzlDTzBsQlJYQkNMRTlCUVU4c01FSkJRVEJDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJSVFZETEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1pHbGpkR2x2Ym1GeWVTQTZiMkpxWldOMElEMGdlMXh1WEhRd09pQW5NU2NzSURFNklDY3lKeXdnTWpvZ0p6TW5MQ0F6T2lBbk5DY3NJRFE2SUNjMUp5d2dOVG9nSnpZbkxDQTJPaUFuTnljc0lEYzZJQ2M0Snl3Z09Eb2dKemtuTENBNU9pQW5ZU2NzWEc1Y2RHRTZJQ2RpSnl3Z1lqb2dKMk1uTENCak9pQW5aQ2NzSUdRNklDZGxKeXdnWlRvZ0oyWW5MQ0JtT2lBblp5Y3NJR2M2SUNkb0p5eGNibHgwYURvZ0oya25MQ0JwT2lBbmFpY3NJR282SUNkckp5d2dhem9nSjJ3bkxDQnNPaUFuYlNjc0lHMDZJQ2R1Snl3Z2Jqb2dKMjhuTEZ4dVhIUnZPaUFuY0Njc0lIQTZJQ2R4Snl3Z2NUb2dKM0luTENCeU9pQW5jeWNzSUhNNklDZDBKeXdnZERvZ0ozVW5MRnh1WEhSMU9pQW5kaWNzSUhZNklDZDNKeXdnZHpvZ0ozZ25MQ0I0T2lBbmVTY3NJSGs2SUNkNkoxeHVmVHRjYmx4dWRtRnlJR3hoZEdWemRFbGtaVzUwYVdacFpYSkRhR0Z5WVdOMFpYSnpJRHB6ZEhKcGJtZGJYU0E5SUZzbk9TZGRPMXh1ZG1GeUlHeGhkR1Z6ZEVsa1pXNTBhV1pwWlhKRGFHRnlZV04wWlhKelgyeGhjM1JEYUdGeVlXTjBaWElnT25OMGNtbHVaeUE5SUNjNUp6dGNiblpoY2lCc1lYUmxjM1JKWkdWdWRHbG1hV1Z5UTJoaGNtRmpkR1Z5YzE5c1lYTjBRMmhoY21GamRHVnlTVzVrWlhnZ09tNTFiV0psY2lBOUlEQTdYRzVjYmk4dmRtRnlJRkpGVTBWU1ZrVkVYMHRGV1NBNlVtVm5SWGh3SUQwZ0wxNG9QenBpY21WaGEzeGpLRDg2WVNnL09uTmxmSFJqYUNsOGJHRnpjM3h2YmlnL09uTjBmSFJwYm5WbEtTbDhaQ2cvT21Vb1B6cGlkV2RuWlhKOFptRjFiSFI4YkdWMFpTbDhieWw4WlNnL09teHpaWHh1ZFcxOGVDZy9PbkJ2Y25SOGRHVnVaSE1wS1h4bUtEODZhVzVoYkd4NWZHOXlmSFZ1WTNScGIyNHBmR2tvUHpwbWZHMXdiM0owZkc0b1B6cHpkR0Z1WTJWdlppay9LWHh1WlhkOGNtVjBkWEp1ZkhNb1B6cDNhWFJqYUh4emRYQmxjaWw4ZENnL09uSjVmSGx3Wlc5bUtYeDJLRDg2WVhKOGIybGtLWHgzS0Q4NmFHbHNaWHhwZEdncEtTUXZPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnU1dSbGJuUnBabWxsY2lBb0tTQTZjM1J5YVc1bklIdGNibHgwWEc1Y2RHbG1JQ2dnYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5mYkdGemRFTm9ZWEpoWTNSbGNqMDlQU2Q2SnlBcElIdGNibHgwWEhSc1lYUmxjM1JKWkdWdWRHbG1hV1Z5UTJoaGNtRmpkR1Z5YzE5c1lYTjBRMmhoY21GamRHVnlJRDBnYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5iYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5mYkdGemRFTm9ZWEpoWTNSbGNrbHVaR1Y0WFNBOUlDY3dKenRjYmx4MFhIUm1iM0lnS0NCMllYSWdZMmhoY21GamRHVnlTVzVrWlhnZ09tNTFiV0psY2lBOUlHeGhkR1Z6ZEVsa1pXNTBhV1pwWlhKRGFHRnlZV04wWlhKelgyeGhjM1JEYUdGeVlXTjBaWEpKYm1SbGVEc2dPeUFwSUh0Y2JseDBYSFJjZEdsbUlDZ2dZMmhoY21GamRHVnlTVzVrWlhnZ0tTQjdYRzVjZEZ4MFhIUmNkR2xtSUNnZ2JHRjBaWE4wU1dSbGJuUnBabWxsY2tOb1lYSmhZM1JsY25OYkxTMWphR0Z5WVdOMFpYSkpibVJsZUYwOVBUMG5laWNnS1NCN1hHNWNkRngwWEhSY2RGeDBiR0YwWlhOMFNXUmxiblJwWm1sbGNrTm9ZWEpoWTNSbGNuTmJZMmhoY21GamRHVnlTVzVrWlhoZElEMGdKekFuTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSY2RHVnNjMlVnZTF4dVhIUmNkRngwWEhSY2RHeGhkR1Z6ZEVsa1pXNTBhV1pwWlhKRGFHRnlZV04wWlhKelcyTm9ZWEpoWTNSbGNrbHVaR1Y0WFNBOUlHUnBZM1JwYjI1aGNubGJiR0YwWlhOMFNXUmxiblJwWm1sbGNrTm9ZWEpoWTNSbGNuTmJZMmhoY21GamRHVnlTVzVrWlhoZFhUdGNibHgwWEhSY2RGeDBYSFJpY21WaGF6dGNibHgwWEhSY2RGeDBmVnh1WEhSY2RGeDBmVnh1WEhSY2RGeDBaV3h6WlNCN1hHNWNkRngwWEhSY2RHeGhkR1Z6ZEVsa1pXNTBhV1pwWlhKRGFHRnlZV04wWlhKekxuVnVjMmhwWm5Rb0oyRW5LVHRjYmx4MFhIUmNkRngwS3l0c1lYUmxjM1JKWkdWdWRHbG1hV1Z5UTJoaGNtRmpkR1Z5YzE5c1lYTjBRMmhoY21GamRHVnlTVzVrWlhnN1hHNWNkRngwWEhSY2RHSnlaV0ZyTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDFjYmx4MGZWeHVYSFJsYkhObElIdGNibHgwWEhSc1lYUmxjM1JKWkdWdWRHbG1hV1Z5UTJoaGNtRmpkR1Z5YzE5c1lYTjBRMmhoY21GamRHVnlJRDBnYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5iYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5mYkdGemRFTm9ZWEpoWTNSbGNrbHVaR1Y0WFNBOUlHUnBZM1JwYjI1aGNubGJiR0YwWlhOMFNXUmxiblJwWm1sbGNrTm9ZWEpoWTNSbGNuTmZiR0Z6ZEVOb1lYSmhZM1JsY2wwN1hHNWNkSDFjYmx4MFhHNWNkQzh2ZG1GeUlHbGtaVzUwYVdacFpYSWdPbk4wY21sdVp5QTlJR3hoZEdWemRFbGtaVzUwYVdacFpYSkRhR0Z5WVdOMFpYSnpMbXB2YVc0b0p5Y3BPMXh1WEhRdkwybG1JQ2dnVWtWVFJWSldSVVJmUzBWWkxuUmxjM1FvYVdSbGJuUnBabWxsY2lrZ0tTQjdYRzVjZEM4dlhIUnNZWFJsYzNSSlpHVnVkR2xtYVdWeVEyaGhjbUZqZEdWeWMxOXNZWE4wUTJoaGNtRmpkR1Z5SUQwZ2JHRjBaWE4wU1dSbGJuUnBabWxsY2tOb1lYSmhZM1JsY25OYmJHRjBaWE4wU1dSbGJuUnBabWxsY2tOb1lYSmhZM1JsY25OZmJHRnpkRU5vWVhKaFkzUmxja2x1WkdWNFhTQTlJR1JwWTNScGIyNWhjbmxiYkdGMFpYTjBTV1JsYm5ScFptbGxja05vWVhKaFkzUmxjbk5mYkdGemRFTm9ZWEpoWTNSbGNsMDdYRzVjZEM4dlhIUnlaWFIxY200Z2JHRjBaWE4wU1dSbGJuUnBabWxsY2tOb1lYSmhZM1JsY25NdWFtOXBiaWduSnlrN1hHNWNkQzh2ZlZ4dVhIUXZMM0psZEhWeWJpQnBaR1Z1ZEdsbWFXVnlPMXh1WEhSY2JseDBjbVYwZFhKdUlHeGhkR1Z6ZEVsa1pXNTBhV1pwWlhKRGFHRnlZV04wWlhKekxtcHZhVzRvSnljcE8xeHVYSFJjYm4xY2JpSmRmUT09Iiwi77u/LyohXG4gKiDmqKHlnZflkI3np7DvvJpAbHRkL2otZ3JvdXBpZnlcbiAqIOaooeWdl+WKn+iDve+8muWwhuS4gOS4quWtl+espuS4suaVsOe7hO+8jOi9rOWMluS4uuWIhuaUr+W8j+S8mOWMluWQjueahOato+WImeihqOi+vuW8j+WMuemFjee7hOOAglxuICAg44CA44CA44CA44CA44CAVHJhbnNmb3JtIGEgc3RyaW5nIGFycmF5IGludG8gYSBicmFuY2gtc3R5bGUgb3B0aW1pemVkIHJlZ0V4cCBncm91cC5cbiAqIOaooeWdl+eJiOacrO+8mjMuMC4wXG4gKiDorrjlj6/mnaHmrL7vvJpMR1BMLTMuMFxuICog5omA5bGe5L2c6ICF77ya6b6Z6IW+6YGTIDxMb25nVGVuZ0Rhb0BMb25nVGVuZ0Rhby5jb20+ICh3d3cuTG9uZ1RlbmdEYW8uY29tKVxuICog6Zeu6aKY5Y+N6aaI77yaaHR0cHM6Ly9HaXRIdWIuY29tL0xvbmdUZW5nRGFvL2otZ3JvdXBpZnkvaXNzdWVzXG4gKiDpobnnm67kuLvpobXvvJpodHRwczovL0dpdEh1Yi5jb20vTG9uZ1RlbmdEYW8vai1ncm91cGlmeS9cbiAqL1xuXG52YXIgdmVyc2lvbiA9ICczLjAuMCc7XG5cbi8vIEB0cy1pZ25vcmVcbnZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuZnVuY3Rpb24gYXBwZW5kQnJhbmNoKGdyb3VwLCBrZXksIHVGbGFnKSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgICB1RmxhZyAmJiBrZXkuY29kZVBvaW50QXQoMCkgIT09IGtleS5jaGFyQ29kZUF0KDApXG4gICAgICAgICAgICA/IGFwcGVuZEJyYW5jaChncm91cFtrZXkuc2xpY2UoMCwgMildIHx8IChncm91cFtrZXkuc2xpY2UoMCwgMildID0gY3JlYXRlKG51bGwpKSwga2V5LnNsaWNlKDIpLCB0cnVlKVxuICAgICAgICAgICAgOiBhcHBlbmRCcmFuY2goZ3JvdXBba2V5LmNoYXJBdCgwKV0gfHwgKGdyb3VwW2tleS5jaGFyQXQoMCldID0gY3JlYXRlKG51bGwpKSwga2V5LnNsaWNlKDEpLCBmYWxzZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc291cmNpZnkoZ3JvdXAsIG5lZWRFc2NhcGUpIHtcbiAgICB2YXIgYnJhbmNoZXMgPSBbXTtcbiAgICB2YXIgc2luZ2xlQ2hhcmFjdGVyc0JyYW5jaCA9IFtdO1xuICAgIGZvciAodmFyIGNoYXIgaW4gZ3JvdXApIHtcbiAgICAgICAgdmFyIHN1Yl9icmFuY2hlcyA9IHNvdXJjaWZ5KGdyb3VwW2NoYXJdLCBuZWVkRXNjYXBlKTtcbiAgICAgICAgaWYgKG5lZWRFc2NhcGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY2hhcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgICAgIGNhc2UgJz8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ14nOlxuICAgICAgICAgICAgICAgIGNhc2UgJyQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJygnOlxuICAgICAgICAgICAgICAgIGNhc2UgJyknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1snOlxuICAgICAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1xcXFwnOlxuICAgICAgICAgICAgICAgICAgICBjaGFyID0gJ1xcXFwnICsgY2hhcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJfYnJhbmNoZXMgPyBicmFuY2hlcy5wdXNoKGNoYXIgKyBzdWJfYnJhbmNoZXMpIDogc2luZ2xlQ2hhcmFjdGVyc0JyYW5jaC5wdXNoKGNoYXIpO1xuICAgIH1cbiAgICBzaW5nbGVDaGFyYWN0ZXJzQnJhbmNoLmxlbmd0aCAmJiBicmFuY2hlcy51bnNoaWZ0KHNpbmdsZUNoYXJhY3RlcnNCcmFuY2gubGVuZ3RoID09PSAxID8gc2luZ2xlQ2hhcmFjdGVyc0JyYW5jaFswXSA6ICdbJyArIHNpbmdsZUNoYXJhY3RlcnNCcmFuY2guam9pbignJykgKyAnXScpO1xuICAgIHJldHVybiBicmFuY2hlcy5sZW5ndGggPT09IDAgPyAnJyA6IGJyYW5jaGVzLmxlbmd0aCA9PT0gMSA/IGJyYW5jaGVzWzBdIDogJyg/OicgKyBicmFuY2hlcy5qb2luKCd8JykgKyAnKSc7XG59XG5mdW5jdGlvbiBncm91cGlmeShicmFuY2hlcywgdUZsYWcsIG5vRXNjYXBlKSB7XG4gICAgdmFyIGdyb3VwID0gY3JlYXRlKG51bGwpO1xuICAgIGZvciAodmFyIGxlbmd0aCA9IGJyYW5jaGVzLmxlbmd0aCwgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBhcHBlbmRCcmFuY2goZ3JvdXAsIGJyYW5jaGVzW2luZGV4XSwgdUZsYWcpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNpZnkoZ3JvdXAsICFub0VzY2FwZSk7XG59XG52YXIgX2V4cG9ydCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ3JvdXBpZnkoYnJhbmNoZXMsIHVGbGFnLCBub0VzY2FwZSkge1xuICAgICAgICB2YXIgZ3JvdXAgPSBjcmVhdGUobnVsbCk7XG4gICAgICAgIGZvciAodmFyIGxlbmd0aCA9IGJyYW5jaGVzLmxlbmd0aCwgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgYXBwZW5kQnJhbmNoKGdyb3VwLCBicmFuY2hlc1tpbmRleF0sIHVGbGFnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNpZnkoZ3JvdXAsICFub0VzY2FwZSk7XG4gICAgfVxuICAgIGdyb3VwaWZ5LnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHJldHVybiBncm91cGlmeS5ncm91cGlmeSA9IGdyb3VwaWZ5W1wiZGVmYXVsdFwiXSA9IGdyb3VwaWZ5O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgX2V4cG9ydDtcbmV4cG9ydCB7IGdyb3VwaWZ5LCB2ZXJzaW9uIH07XG5cbi8qwqEgQGx0ZC9qLWdyb3VwaWZ5ICovXG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluWmxjbk5wYjI0L2RHVjRkQ0lzSW1WNGNHOXlkQzUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENBbk15NHdMakFuT3lJc0lpOHZJRUIwY3kxcFoyNXZjbVZjYm1sdGNHOXlkQ0IyWlhKemFXOXVJR1p5YjIwZ0p5NHZkbVZ5YzJsdmJqOTBaWGgwSnp0Y2JuWmhjaUJqY21WaGRHVWdQU0JQWW1wbFkzUXVZM0psWVhSbE8xeHVablZ1WTNScGIyNGdZWEJ3Wlc1a1FuSmhibU5vS0dkeWIzVndMQ0JyWlhrc0lIVkdiR0ZuS1NCN1hHNGdJQ0FnYVdZZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNCMVJteGhaeUFtSmlCclpYa3VZMjlrWlZCdmFXNTBRWFFvTUNrZ0lUMDlJR3RsZVM1amFHRnlRMjlrWlVGMEtEQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHRndjR1Z1WkVKeVlXNWphQ2huY205MWNGdHJaWGt1YzJ4cFkyVW9NQ3dnTWlsZElIeDhJQ2huY205MWNGdHJaWGt1YzJ4cFkyVW9NQ3dnTWlsZElEMGdZM0psWVhSbEtHNTFiR3dwS1N3Z2EyVjVMbk5zYVdObEtESXBMQ0IwY25WbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCaGNIQmxibVJDY21GdVkyZ29aM0p2ZFhCYmEyVjVMbU5vWVhKQmRDZ3dLVjBnZkh3Z0tHZHliM1Z3VzJ0bGVTNWphR0Z5UVhRb01DbGRJRDBnWTNKbFlYUmxLRzUxYkd3cEtTd2dhMlY1TG5Oc2FXTmxLREVwTENCbVlXeHpaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVpuVnVZM1JwYjI0Z2MyOTFjbU5wWm5rb1ozSnZkWEFzSUc1bFpXUkZjMk5oY0dVcElIdGNiaUFnSUNCMllYSWdZbkpoYm1Ob1pYTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2MybHVaMnhsUTJoaGNtRmpkR1Z5YzBKeVlXNWphQ0E5SUZ0ZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdOb1lYSWdhVzRnWjNKdmRYQXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITjFZbDlpY21GdVkyaGxjeUE5SUhOdmRYSmphV1o1S0dkeWIzVndXMk5vWVhKZExDQnVaV1ZrUlhOallYQmxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWxaV1JGYzJOaGNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb1kyaGhjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeW9uT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeXNuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKejhuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMTRuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeWduT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeWtuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMXNuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMTBuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM3NuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM3duT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeTBuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeTRuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMXhjWEZ3bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYUdGeUlEMGdKMXhjWEZ3bklDc2dZMmhoY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCemRXSmZZbkpoYm1Ob1pYTWdQeUJpY21GdVkyaGxjeTV3ZFhOb0tHTm9ZWElnS3lCemRXSmZZbkpoYm1Ob1pYTXBJRG9nYzJsdVoyeGxRMmhoY21GamRHVnljMEp5WVc1amFDNXdkWE5vS0dOb1lYSXBPMXh1SUNBZ0lIMWNiaUFnSUNCemFXNW5iR1ZEYUdGeVlXTjBaWEp6UW5KaGJtTm9MbXhsYm1kMGFDQW1KaUJpY21GdVkyaGxjeTUxYm5Ob2FXWjBLSE5wYm1kc1pVTm9ZWEpoWTNSbGNuTkNjbUZ1WTJndWJHVnVaM1JvSUQwOVBTQXhJRDhnYzJsdVoyeGxRMmhoY21GamRHVnljMEp5WVc1amFGc3dYU0E2SUNkYkp5QXJJSE5wYm1kc1pVTm9ZWEpoWTNSbGNuTkNjbUZ1WTJndWFtOXBiaWduSnlrZ0t5QW5YU2NwTzF4dUlDQWdJSEpsZEhWeWJpQmljbUZ1WTJobGN5NXNaVzVuZEdnZ1BUMDlJREFnUHlBbkp5QTZJR0p5WVc1amFHVnpMbXhsYm1kMGFDQTlQVDBnTVNBL0lHSnlZVzVqYUdWeld6QmRJRG9nSnlnL09pY2dLeUJpY21GdVkyaGxjeTVxYjJsdUtDZDhKeWtnS3lBbktTYzdYRzU5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjNKdmRYQnBabmtvWW5KaGJtTm9aWE1zSUhWR2JHRm5MQ0J1YjBWelkyRndaU2tnZTF4dUlDQWdJSFpoY2lCbmNtOTFjQ0E5SUdOeVpXRjBaU2h1ZFd4c0tUdGNiaUFnSUNCbWIzSWdLSFpoY2lCc1pXNW5kR2dnUFNCaWNtRnVZMmhsY3k1c1pXNW5kR2dzSUdsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCc1pXNW5kR2c3SUNzcmFXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ1lYQndaVzVrUW5KaGJtTm9LR2R5YjNWd0xDQmljbUZ1WTJobGMxdHBibVJsZUYwc0lIVkdiR0ZuS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlITnZkWEpqYVdaNUtHZHliM1Z3TENBaGJtOUZjMk5oY0dVcE8xeHVmVnh1Wlhod2IzSjBJSHNnZG1WeWMybHZiaUI5TzF4dVpYaHdiM0owSUdSbFptRjFiSFFnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCbmNtOTFjR2xtZVNoaWNtRnVZMmhsY3l3Z2RVWnNZV2NzSUc1dlJYTmpZWEJsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJuY205MWNDQTlJR055WldGMFpTaHVkV3hzS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JHVnVaM1JvSUQwZ1luSmhibU5vWlhNdWJHVnVaM1JvTENCcGJtUmxlQ0E5SURBN0lHbHVaR1Y0SUR3Z2JHVnVaM1JvT3lBcksybHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY0hCbGJtUkNjbUZ1WTJnb1ozSnZkWEFzSUdKeVlXNWphR1Z6VzJsdVpHVjRYU3dnZFVac1lXY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6YjNWeVkybG1lU2huY205MWNDd2dJVzV2UlhOallYQmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ1ozSnZkWEJwWm5rdWRtVnljMmx2YmlBOUlIWmxjbk5wYjI0N1hHNGdJQ0FnY21WMGRYSnVJR2R5YjNWd2FXWjVMbWR5YjNWd2FXWjVJRDBnWjNKdmRYQnBabmxiWENKa1pXWmhkV3gwWENKZElEMGdaM0p2ZFhCcFpuazdYRzU5S1NncE8xeHVMeThqSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5WkdGMFlUcGhjSEJzYVdOaGRHbHZiaTlxYzI5dU8yTm9ZWEp6WlhROWRYUm1MVGc3WW1GelpUWTBMR1Y1U2pKYVdFcDZZVmM1ZFVscWIzcE1RMHA2WWpOV2VWa3lWbnBKYW5CaVNXMVdOR05IT1hsa1F6VXdZM2xLWkV4RFNuVlpWekZzWTNsSk5sY3hNSE5KYlRGb1kwaENjR0p0WkhwSmFtOXBVVlZHUWxGVGVHaFJWVVpvVHpCR1FsRXlTWE5VTUVaQ1ZIbDRVRkZWUmxCTVJURkNVVlV3YzFvd1NrSlJWMlJEVEVWT1FsRlZUVGRSVlVaR1kydE5jMU5WUmtKVFUzaE9VVlZHVGt4RlpFSlJWV056VkZWR1FsUlRlRVJSVlVaRVRFVXhRbEZWTUhOUk1FWkNVWHAwUWxGVlZYcFJhWGhVVVZWR1ZFeEdiRUpSVm10elVUQkdRbEpUZUV4UlZVWm9URVZXUWxGVlZYTlNNRVpDVm5sNFJsRlZSa1pNUlhSQ1VWZFZOMU5WUmtSaGExVnpVMVZHUWxONWVFaFJWVVpJVEVWV1FsRlZZemRWVlVaRVZtbDRURkZWUmt4TVJXeENVVlZyYzFJd1JrSlNlWGhFVVZWR1JFeEdaRUpSVm1OelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlRNRVpDVW5sNFNGRlZSa2hNUlU1Q1VWVk5jMVpWUmtKV1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjZkRnBSVlUwMVVYbDRSRkZWUmtSTVJVNUNVVlZOYzFkVlJrSlhVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVoUlZVWklURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUpWUmtKU1UzaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVlhOVE1FWkNVM2w0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoTVVWVkdURXhGVGtKUlZVMXpVVEJHUWxGNWVFWlJWVVpHVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJXUkNVVlZqYzFSVlJrSlVVM2hFVVZWR1JFeEZiRUpSVld0elVUQkdRbEY1ZUVSUlZVWkdURVZXUWxGVlZYTlNNRVpDVW5sNFJGRlZSa1JNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VWxWR1FsSlRlRXBSVlVaS1RFVk9RbEZWVFRkWFZVWkVaR3RqYzFFd1JrSlJlWGhFVVZWR1JFeEdiRUpSVm10elVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlNNRVpDVW5sNFJGRlZSa1JNUlRGQ1VWVXdjMUV3UmtKUmVYaEVVVlZHUkV4RlRrSlJWVTF6VVRCR1FsRjVlRXBSVlVaS1RFVk9RbEZWVlhOVE1FWkNVM2w0UkZGVlJrUk1SV1JDVVZWamMxRXdSa0pSZVhoT1VWVkdUa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5TTUVaQ1VubDRUbEZWUms1TVJVNUNVVlZOYzFOVlJrSlRVM2hFVVZWR1JFeEZUa0pSVlZWelVsVkdRbEpUZUVoUlZVWklURVZPUWxGVlRYTlRNRVpDVTNsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaEdVVlZHUmt4RmRFSlJWWE56VVRCR1FsRjVlRVJSVlVaRVR6QjBRbEV6VWtoUE1FWkNVVEJaYzFFd1JrSlJlblJDVVZWV1JVeEdUa0pSVmsxelZWVkdRbFZUZUVSUlZVWkdURVYwUWxGWFJYTlNWVVpDVWxONFZsRlZSblJSYW5SS1VWVk9kMUpEZUVwUlZVWktURVpHUWxGV1JYTlNNRVpDV1ZONFJsRlZSa1pNUlU1Q1VWVk5OMU5WUmtST1ZVbHpVMVZHUWxOVGVIcFJhMFpDWXpCSmMxSXdSa0paVTNoR1VWVkdSa3hGVGtKUlZVMDNVMVZHUkUxVlRYTlRNRVpDVkZONFNsRlZSa3BNUld4Q1VWVnJjMU5WUmtKVFUzaE1VVlZHVEV4RlZrSlJWV00zVlZWR1JHVnJTWE5UVlVaQ1UxTjRXbEZWUmxwTVJXUkNVVlpqYzFWVlJrSlZVM2hFVVZWR1JFeEZkRUpSVlhOelVUQkdRbEY1ZUVwUlZVWktURVZPUWxGVlRYTlNWVVpDVWxONFZsRlZSbFpNUlU1Q1VWVk5jMUV3UmtKUmVuUlNVVlZOTTFKRGVFcFJWVVpNVEVaV1FsRldWWE5TVlVaQ1VucDBXbEZWVG5GUmFYaFNVVlZHVkV4RmJFSlJWV3R6VWxWR1FsSjZkRzVSYTBaRVdtbDRURkZWUmt4TVJXUkNVVlZqYzFFd1JrSlJlblJ1VVd0R1FsRjVlRXhSVlVaTVRFVmtRbEZWWTNOUk1FWkNVWHAwYmxGclJrSlJlWGhNVVZWR1RFeEZaRUpSVldOelVUQkdRbEY2ZEc1UmEwWkNVWGw0VEZGVlJreE1SV1JDVVZWamMxRXdSa0pSZW5SdVVXdEdRbEY1ZUV4UlZVWk1URVZrUWxGVlkzTlJNRVpDVVhwMGJsRnJSa0pSZVhoTVVWVkdURXhGWkVKUlZXTnpVVEJHUWxGNmRHNVJhMFpDVVhsNFRGRlZSa3hNUldSQ1VWVmpjMUV3UmtKUmVuUnVVV3RHUWxGNWVFeFJWVVpNVEVWa1FsRlZZM05STUVaQ1VYcDBibEZyUmtKUmVYaE1VVlZHVEV4RlpFSlJWV056VVRCR1FsRjZkRzVSYTBaQ1VYbDRURkZWUmt4TVJXUkNVVlZqYzFFd1JrSlJlblJ1VVd0R1FsRjVlRXhSVlVaTVRFVmtRbEZWWTNOUk1FWkNVWHAwYmxGclJrSlJlWGhNVVZWR1RFeEZaRUpSVldOelVUQkdRbEY2ZEc1UmEwWkNVWGw0VEZGVlJreE1SV1JDVVZWamMxRXdSa0pSZW5SdVVXdEdRbEY1ZUV4UlZVWk1URVZzUWxGVmF6ZGlNRXBDVVhwR1NreEZiRUpSVld0elVqQkdRbEo1ZUVwUlZVWktURVZrUWxGVlRYTlRWVVpDVTFONFJGRlZSa1JQTWtaQ1VUSjRRMDh4VGtKUk1GRTNWVlZHUkZKRGVGcFJWVVphVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJrWkNVVlpGYzFFd1JrSlJlWGhLVVZWR1NreEZUa0pSVlUxelUxVkdRbE5UZUVoUlZVWkVURVpzUWxGV2EzTlJNRVpDVVhsNFJGRlZSa1JNUlU1Q1VWVk5jMUV3UmtKUmVYaDZVV3RHUW1Nd1NYTlJNRVpDVVhsNFNsRlZSa3BNUlU1Q1VWVk5jMU5WUmtKVFUzaEVVVlZHUkV4RlRrSlJWVTAzVXpCR1JHTkZXVGRUVlVaRVVrTjRlbEZyUmtKak1FbHpVVEJHUWxGNWVFNVJWVVpPVEVWc1FsRlZhM05WVlVaQ1ZWTjRSRkZWUmtSTVJUbENVVlU0YzFFd1JrSlJlWGg2VVd0R1FtTXdTWE5STUVaQ1VYbDRUbEZWUms1TVJYUkNVVlZqYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUhwUmEwWkNZekJKYzFFd1JrSlJlWGhFVVZWR1JFeEZUa0pSVlUxelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlNNRVpDVW5sNFNGRlZSa1JNU0U1RFVWVkdlbEZwZUVSUlZVWkVURVZzUWxGVmEzTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUl3UmtKUmVYaElVVlZHU0V4RlRrSlJWVTF6VVRCR1FsRjZkRXBSVlUxNlUybDRVRkZWUmxCTVJrWkNVVlpGYzFFd1JrSlJlWGhPVVZWR1RreEZkRUpSVldOelVUQkdRbEY1ZUVSUlZVWkVURVZPUWxGVlRYTlJNRVpDVVhsNFJsRlZSa1pNUlU1Q1VWVk5jMUV3UmtKUmVYaEVVVlZHUkV4R1JrSlJWa1Z6VVRCR1FsRjVlRTVSVlVaT1RFVjBRbEZWWTNOUk1FWkNVWGw0UkZGVlJrUk1SVTVDVVZWTmMxRXdSa0pSZVhoU1VWVkdVa3hGVGtKUlZVMXpVVEJHUWxGNWVFUlJWVVpFVEVWT1FsRlZUWE5STUVaQ1VYbDRSRkZWUmtSTVJYUkNVVlZ6YzFJd1JrSlJlWGhTVVZWR1VreEZUa0pSVlUxelUxVkdRbE5UZUVSUlZVWkVURVZrUWxGVlkzTlJNRVpDVVhsNFNGRlZSa1JNUldSQ1VWVmpjMUV3UmtKUmVuUkNVVlZPZDFKNWVFUlJWVVpFVHpCR1FsSlZVWE5VVlVaQ1ZGTjRWbEZWUmxaTVJrWkNVVlpGYzFFd1JrSlNVM2hTVVZWR2NsRnBlRVpSVlVaR1RFVjBRbEZYVlhOU1ZVWkNVbE40VWxGVlJuSlJhblJLVVZWT2IxSnBlRXBSVlVaS1RFVjBRbEZWYzNOU01FWkNWbmw0VGxGVlJrNU1SVTVDVVZWTmMxTlZSa0pUVTNoRVVWVkdSRXhGVGtKUlZVMDNVMVZHUkdGclRYTlRNRVpDVkZONFNsRlZSa3BNUlRGQ1VWVXdjMUl3UmtKV2VYaFNVVlZHVWt4RlRrSlJWVTF6VkZWR1FsUlRlRVpSVlVaR1RFVjBRbEZWYzNOU01FWkNWbmw0UkZGVlJrUk1SVlpDVVZWVmMxTXdSa0pUZVhoSVVWVkdSRXhGTVVKUlZUQnpVbFZHUWxKVGVFWlJWVVpHVEVWMFFsRlZjM05TVlVaQ1VucDBVbEZWUmtaTVJteENVVlpyYzFFd1JrSlJlWGhNVVZWR1RFeEZWa0pSVlZWelZWVkdRbFZUZUVSUlZVWkVURVYwUWxGVmMzTlJNRVpDVVhsNFJsRlZSa1pNUlhSQ1VWVnpjMUV3UmtKUmVYaEVVVlZHUkU4d2RFSlJWVlUzVTFWR1JHUnJhM05VTUVaQ1ZIbDRVbEZWUmxKTVJVNUNVVlZOYzFNd1JrSlRlWGhHVVZWR1JreEZUa0pSVlUxelZWVkdRbFZUZUVSUlZVWkVURVZPUWxGVlRUZFJWVVpFWW10TmMxRXdSa0pSZW5SQ1VWVldSVXhGT1VKUlZUaHpVbFZHUWxKVGVGQlJWVVpRVEVWV1FsRlZWWE5STUVaQ1VYcDBRbEZWVm5WUmFYaHNVVlZHYkV4RlRrSlJWVlUzVTFWR1JHRkZTWE5WTUVaQ1ZYbDRVbEZWUmxKTVJVNUNVVlZWYzFWVlJrSmhNRWx6VWxWR1FsSlRlRXhSVlVac1RFVldRbEZWVlhOVlZVWkNZVEJKTjFWVlJrUmxhMVZ6VTFWR1FsTlRlRXhSVlVaTVRFVmtRbEZXWTNOVVZVWkNWRk40UkZGVlJrUk1SV3hDVVZWcmMxRXdSa0pSZVhoRVVWVkdSRTh4UmtKUk1uQkVURVYwUWxGVk1ITlRWVVpDVTFONFRsRlZSazVNUldSQ1VWWmpjMVZWUmtKVlUzaEVVVlZHUkV4Rk1VSlJWVEJ6VWxWR1FsSlRlRXhSVlVaTVRFVmtRbEZXWTNOUk1FWkNVWGw0UmxGVlJrWk1SWFJDVVZWemMxSXdSa0pSZVhoT1VWVkdUa3hGVmtKUlZWVnpVbFZHUWxKVGVFeFJWVVpNVEVWV1FsRlZZemRYVlVaQ1VsTjRXbEZWUmxwTVJVNUNVVlZOYzFNd1JrSlRlWGhHVVZWR1JreEdSa0pSVmtWelVUQkdRbEY1ZUV4UlZVWk1URVZPUWxGVlRYTlNWVVpDVWxONFRGRlZSa3hNUlU1Q1VWVk5jMUV3UmtKUmVuUlVVVlZHUms4eFJrSlJNMXBLVEVVNVFsRlZPSE5WVlVaQ1ZWTjRSRkZWUmtSTVJYUkNVVlZ6YzFKVlJrSlNVM2hFVVZWR1JFeEdSa0pSVmtWelVUQkdRbEY1ZUVSUlZVWkVUekJzUWxFeU5VUk1SVTVDVVZWTk4xTlZSa1JTUTNoU1VWVkdVa3hGVGtKUlZVMXpWREJHUWxSNWVFaFJWVVpJVEVVNVFsRlZPSE5STUVaQ1VYcDBTbEZWVFhwUmFYaFFVVlZHVUV4R1JrSlJWa1Z6VVRCR1FsRjVlRkpSVlVaU1RFVmtRbEZWWTNOVlZVWkNWVk40UkZGVlJrUk1SazVDVVZVNGMxRXdSa0pSVTNoSVVWVkdTRXhHUmtKUlZrVnpVVEJHUWxGNmRFSlJWVTQwVWtONFJGRlZSa1JNUlU1Q1VWVlZjMUpWUmtKU1UzaEVVVlZHUkVscGQybGpNamt4WTIxT2JHTXdUblppYmxKc1ltNVJhVTlzYzJsTWVUaG5VVWhTZWt4WGJHNWliVGw1V2xaNGRXRlhNWGRpTTBvd1NVaGFiR051VG5CaU1qUm5XbTVLZG1KVFFXNU1hVGt5V2xoS2VtRlhPWFZRTTFKc1pVaFJiazh4ZUhWWVJ6VXlXVmhKWjFrelNteFpXRkpzU1VRd1oxUXlTbkZhVjA0d1RHMU9lVnBYUmpCYVZIUmpZbXg0ZFZwdVZuVlpNMUp3WWpJMFoxbFlRbmRhVnpWclVXNUthR0p0VG05SlEyaHVZMjA1TVdORFFUWmlNa3B4V2xkT01FeERRbkphV0d0blQyNU9NR050YkhWYWVYZG5aRlZhYzFsWFl5OUpSSEJwWWpJNWMxcFhSblZMVTBFMlpHMDVjRnBEUWpkWVJ6VmpaRWRzYlVsRFoyZGhNbFkxU1VOcloyVXhlSFZZU0ZKalpFaFdSMkpIUm01SlExbHRTVWQwYkdWVE5XcGlNbEpzVlVjNWNHSnVVa0prUTJkM1MxTkZPVkJYZEd4bFV6VnFZVWRHZVZFeU9XdGFWVVl3UzBSQmNGaEhOV05rUm5nd1dFaFJMMGxIUm5kalIxWjFXa1ZLZVZsWE5XcGhRMmh1WTIwNU1XTkdkSEphV0d0MVl6SjRjRmt5Vlc5TlEzZG5UV2xzWkVsSWVEaEpRMmRuV2pOS2RtUllRbUpoTWxZMVRHNU9jMkZYVG14TFJFRnpTVVJKY0ZoVFFUbEpSMDU1V2xkR01GcFRhSFZrVjNoelMxTkJjRXhEUW5KYVdHdDFZeko0Y0ZreVZXOU5hV3R6U1VoU2VXUlhWWEJZUnpWalpFWjRNRmhJVVRaSlIwWjNZMGRXZFZwRlNubFpWelZxWVVOb2JtTnRPVEZqUm5SeVdsaHJkVmt5YUdoamEwWXdTMFJCY0ZoVFFqaG1RMEZ2U1Vka2VXSXpWbmRYTW5Sc1pWTTFhbUZIUm5sUldGRnZUVU5zWkVsRU1HZFpNMHBzV1ZoU2JFdEhOVEZpUjNkd1NVTnJjMGxIZEd4bFV6VjZZa2RzYWxwVFozaExVM2RuV20xR2MyTXlWWEJQTVhoMVdFaFNPVmhITlRsWVJ6VmpZbTFhTVdKdFRqQmhWemwxU1VoT2RtUllTbXBoVjFvMVNVTm9ibU50T1RGalEwRTJZakpLY1ZwWFRqQk1RMEoxV2xkV2ExSllUbXBaV0VKc1NVUndhV0l5T1hOYVYwWjFTMU5CTm1NelVubGhWelZ1U1VoMFkySnNlREJrYlVaNVNVZEtlVmxYTldwaFIxWjZTVVJ3ZW1SSVNuQmliV1JpV0ZOQk9VbEdkR1JQTVhoMVdFaFNNbGxZU1dkak1teDFXako0YkZFeWFHaGpiVVpxWkVkV2VXTXdTbmxaVnpWcVlVTkJObU16VW5saFZ6VnVWekV3WjFCVFFtSllWSFJqWW14NE1GcHRPWGxKUTJkblpHMUdlVWxIVG05WldFbG5ZVmMwWjFvelNuWmtXRUZuUzFOQ04xaEhOV05rUm5nd1pHMUdlVWxJVGpGWmJEbHBZMjFHZFZreWFHeGplVUUyWXpOU2VXRlhOVzVKUkRCbll6STVNV050VG5CYWJtdHZXak5LZG1SWVFtSlpNbWhvWTJ3d2MwbEhOV3hhVjFKR1l6Sk9hR05IVlhCUE1YaDFXRWhTWTJSSGJHMUpRMmRuWW0xV2JGcEZWbnBaTWtaM1dsTkJjRWxJZEdOaWJIZ3dXRWhTWTJSSVRqTmhXRkpxWVVOQmIwbEhUbTlaV0VsblMxTkNOMWhITldOa1JuZ3dXRWhTWTJSSFRtaGpNbFZuU25sdmJrOXBRbXBaV0U1c1NVTmpja3A2YjJkWk1rWjZXbE5CYmxCNVl6WkpSMDVvWXpKVlowb3hORzVQYVVKcVdWaE9iRWxEWTJ0S2VtOW5XVEpHZWxwVFFXNUxRMk0yU1VkT2FHTXlWV2RLZVd0dVQybENhbGxZVG14SlEyUmlTbnB2WjFreVJucGFVMEZ1V0ZOak5rbEhUbWhqTWxWblNqTnpiazlwUW1wWldFNXNTVU5rT0VwNmIyZFpNa1o2V2xOQmJreFRZelpKUjA1b1l6SlZaMHA1Tkc1UGFVSnFXVmhPYkVsRFpHTllSbmhqU25wd1kySnNlREJZU0ZKalpFWjRNRmhJVW1waFIwWjVTVVF3WjBveGVHTllSbmR1U3pKT2IxbFlTVGRZUnpWalpFWjRNRmhJVWpsWVJ6VmpaRVo0TUdaV2VIVllTRkpqWkVoT01WbHNPV2xqYlVaMVdUSm9iR041UVM5SlIwcDVXVmMxYW1GSFZucE1ia0l4WXpKbmIxa3lhR2hqYVhSNlpGZEtabGx1U21oaWJVNXZXbGhOY0VsRWIyZGpNbXgxV2pKNGJGRXlhR2hqYlVacVpFZFdlV013U25sWlZ6VnFZVU0xZDJSWVRtOUxSMDV2V1ZoSmNFOHhlSFZZU0ZJNVdFYzFZMlJJVG5CaWJXUnpXbFZPYjFsWVNtaFpNMUpzWTI1T1EyTnRSblZaTW1kMVlrZFdkVm96VW05SlExbHRTVWRLZVZsWE5XcGhSMVo2VEc1V2RXTXlhSEJhYmxGdll6SnNkVm95ZUd4Uk1taG9ZMjFHYW1SSFZubGpNRXA1V1ZjMWFtRkROWE5hVnpWdVpFZG5PVkJVTUhoSlJEaG5ZekpzZFZveWVHeFJNbWhvWTIxR2FtUkhWbmxqTUVwNVdWYzFhbUZHYzNkWVUwRTJTVU5rWWtwNWRIcGhWelZ1WWtkV1JHRkhSbmxaVjA0d1dsaEtlbEZ1U21oaWJVNXZURzF3ZG1GWE5HOUtlV053UzNsa1pFcDVhemRZUnpWalpFaEtiR1JJVm5saWFVSnBZMjFHZFZreWFHeGplVFZ6V2xjMWJtUkhaemxRVkRCM1NVUTRaMHA1WTJkUGFVSnBZMjFHZFZreWFHeGplVFZ6V2xjMWJtUkhaemxRVkRCNFNVUTRaMWx1U21oaWJVNXZXbGhPWWsxR01HZFBhVUZ1UzBRNE5rcDVkR2xqYlVaMVdUSm9iR041TlhGaU1teDFTME5rT0VwNWEzSktlV3R1VHpGNGRXWldlSFZZUnpWc1pVaENkbU51VVdkYWJsWjFXVE5TY0dJeU5HZGFNMHAyWkZoQ2NGcHVhMmRMUjBwNVdWYzFhbUZIVm5wSlJIQjZaRWhLY0dKdFpHSllVM2RuWkZWYWMxbFhZeTlKUkhCcFlqSTVjMXBYUm5WTVEwSjFZakJXZWxreVJuZGFWRGhuVDIxS2RtSXllR3haVnpSd1NVUndlbVJJU25CaWJXTm5aVEY0ZFZoSVVqSlpXRWxuV2pOS2RtUllRV2RQYlRscFlXMVdhbVJEUVRsSlIwNTVXbGRHTUZwVGFIVmtWM2h6UzFSMFkySnNlREJhYlRsNVNVTm5aMlJ0Um5sSlIzaHNZbTFrTUdGRFFUWmlibFowV1cxV2VVbEVNR2RaYmtwb1ltMU9iMXBZVFhWaVIxWjFXak5TYjB4RFFuQmliVkpzWlVOQk5tSnVWblJaYlZaNVNVUXdaMDFFYzJkaFZ6VnJXbGhuT0dKSFZuVmFNMUp2VDNsQmNrc3liSFZhUjFZMFNVTnJaMlY1UW1oalNFSnNZbTFTUTJOdFJuVlpNbWR2V2pOS2RtUllRWE5KUjBwNVdWYzFhbUZIVm5wWE1teDFXa2RXTkZoVGQyZGtWVnB6V1ZkamNFOTVRamxZUnpWalpFaEtiR1JJVm5saWFVSjZZak5XZVZreWJHMWxVMmh1WTIwNU1XTkRkMmRKVnpWMlVsaE9hbGxZUW14TFZIUmpZbTR4WTJKc2VIVmFXR2gzWWpOS01FbEljMmRrYlZaNVl6SnNkbUpwUWpsUE1YaDFXRWMxYkdWSVFuWmpibEZuV2tkV2JWbFlWbk5rUTBGdlNVTm5jRWxFTUN0SlNIUmpZbXg0TUZwdVZuVlpNMUp3WWpJMFoxb3pTblprV0VKd1dtNXJaMHRIU25sWlZ6VnFZVWRXZWtsRWNIcGtTRXB3WW0xa1lsaFRkMmRrVlZweldWZGpMMGxFY0dsaU1qbHpXbGRHZFV4RFFuVmlNRlo2V1RKR2QxcFVPR2RQYlVwMllqSjRiRmxYTkhCSlJIQjZaRWhLY0dKdFkyZGxNWGgxV0VoU1kyUklXbWhqYVVKdVkyMDVNV05EUVRaaU1rcHhXbGRPTUVsRU1HZFpNMHBzV1ZoU2JFdEhOVEZpUjNkd1R6RjRkVmhJVW1Oa1IxcDJZMmxCYjBsSVdtaGphVUp6V2xjMWJtUkhaMmRQYlRVeFlsZEtiR05wUVRsSlIwcDVXVmMxYW1GSFZucE1iWGhzWW0xa01HRkRkMmRoVnpWcldsaG5aMDl0TlRGaVYwcHNZMmxCT1VsRVFUZEpSMngxV2tkV05GQkhlR3hpYldRd1lVUnpaMHQ1ZEhCaWJWSnNaVU5CY0VsSWMyZFpXRUozV2xjMWExRnVTbWhpYlU1dlMwZGtlV0l6Vm5kTVEwSnBZMjFHZFZreWFHeGpNWFJ3WW0xU2JHVkdNSE5KU0ZaSFlrZEdia3RVYzJkbVZuaDFXRWhTWTJSSVNteGtTRlo1WW1sQ2VtSXpWbmxaTW14dFpWTm9ibU50T1RGalEzZG5TVmMxZGxKWVRtcFpXRUpzUzFSMFkySnNlREJtVm5oMVdFaFNibU50T1RGalIyeHRaVk0xTWxwWVNucGhWemwxU1VRd1oyUnRWbmxqTW14MlltcDBZMkpzZURCamJWWXdaRmhLZFVsSFpIbGlNMVozWVZkYU5VeHRaSGxpTTFaM1lWZGFOVWxFTUdkYU0wcDJaRmhDY0ZwdWEzVmFSMVp0V1ZoV2MyUkRRVGxKUjJSNVlqTldkMkZYV2pWUE1YaDFabE5CY0V0RGF6ZFlSelJwV0Znd1BTSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096dEJRVUZCTEdOQlFXVXNUMEZCVHpzN1FVTkJkRUk3UVVGRFFTeEJRVU5CTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRE0wSXNVMEZCVXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVTdTVUZEY2tNc1NVRkJTU3hIUVVGSExFVkJRVVU3VVVGRFRDeExRVUZMTEVsQlFVa3NSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJRenRqUVVNelF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNN1kwRkRia2NzV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzB0QlF6RkhPME5CUTBvN1FVRkRSQ3hUUVVGVExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVXNWVUZCVlN4RlFVRkZPMGxCUTJwRExFbEJRVWtzVVVGQlVTeEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTnNRaXhKUVVGSkxITkNRVUZ6UWl4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOb1F5eExRVUZMTEVsQlFVa3NTVUZCU1N4SlFVRkpMRXRCUVVzc1JVRkJSVHRSUVVOd1FpeEpRVUZKTEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUTNKRUxFbEJRVWtzVlVGQlZTeEZRVUZGTzFsQlExb3NVVUZCVVN4SlFVRkpPMmRDUVVOU0xFdEJRVXNzUjBGQlJ5eERRVUZETzJkQ1FVTlVMRXRCUVVzc1IwRkJSeXhEUVVGRE8yZENRVU5VTEV0QlFVc3NSMEZCUnl4RFFVRkRPMmRDUVVOVUxFdEJRVXNzUjBGQlJ5eERRVUZETzJkQ1FVTlVMRXRCUVVzc1IwRkJSeXhEUVVGRE8yZENRVU5VTEV0QlFVc3NSMEZCUnl4RFFVRkRPMmRDUVVOVUxFdEJRVXNzUjBGQlJ5eERRVUZETzJkQ1FVTlVMRXRCUVVzc1IwRkJSeXhEUVVGRE8yZENRVU5VTEV0QlFVc3NSMEZCUnl4RFFVRkRPMmRDUVVOVUxFdEJRVXNzUjBGQlJ5eERRVUZETzJkQ1FVTlVMRXRCUVVzc1IwRkJSeXhEUVVGRE8yZENRVU5VTEV0QlFVc3NSMEZCUnl4RFFVRkRPMmRDUVVOVUxFdEJRVXNzUjBGQlJ5eERRVUZETzJkQ1FVTlVMRXRCUVVzc1NVRkJTVHR2UWtGRFRDeEpRVUZKTEVkQlFVY3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRoUVVNeFFqdFRRVU5LTzFGQlEwUXNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWa3NRMEZCUXl4SFFVRkhMSE5DUVVGelFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVONlJqdEpRVU5FTEhOQ1FVRnpRaXhEUVVGRExFMUJRVTBzU1VGQlNTeFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMSE5DUVVGelFpeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRWRCUVVjc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExITkNRVUZ6UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTnFTeXhQUVVGUExGRkJRVkVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzBOQlF6bEhPMEZCUTBRc1FVRkJUeXhUUVVGVExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRKUVVOb1JDeEpRVUZKTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRGVrSXNTMEZCU3l4SlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlR0UlFVTnVSU3haUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dExRVU12UXp0SlFVTkVMRTlCUVU4c1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPME5CUTNKRE8wRkJRMFFzUVVGRFFTeGpRVUZsTEVOQlFVTXNXVUZCV1R0SlFVTjRRaXhUUVVGVExGRkJRVkVzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHRSUVVONlF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGVrSXNTMEZCU3l4SlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NSMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlR0WlFVTnVSU3haUVVGWkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU12UXp0UlFVTkVMRTlCUVU4c1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMHRCUTNKRE8wbEJRMFFzVVVGQlVTeERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNN1NVRkRNMElzVDBGQlR5eFJRVUZSTEVOQlFVTXNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdRMEZETjBRc1IwRkJSeXhEUVVGRE96czdPenM3T3pzN0lpd2ljMjkxY21ObFVtOXZkQ0k2SWk0dUx5NHVMM055WXk4aWZRPT0iLCJpbXBvcnQgeyBncm91cGlmeSB9IGZyb20gJ0BsdGQvai1ncm91cGlmeSc7XG5pbXBvcnQgeyBJZGVudGlmaWVyIH0gZnJvbSAnLi9JZGVudGlmaWVyJztcbnZhciB1bmRlZmluZWQ7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBTRUFSQ0ggPSAvX19bYS16XVthLXowLTldKig/Ol9bYS16MC05XSspKl9fL2lnO1xudmFyIE5VTEwgPSBPYmplY3QuZnJlZXplKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuT2JqZWN0U2NvcGUucHJvdG90eXBlID0gTlVMTDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNjb3BlKGtleXMpIHtcbiAgICBpZiAoa2V5cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblNjb3BlKGlzQXJyYXkodGhpcykgPyBtaXgodGhpcykgOiBjcmVhdGUodGhpcyBpbnN0YW5jZW9mIE9iamVjdFNjb3BlID8gdGhpcyA6IG51bGwpKTtcbiAgICB9XG4gICAgdmFyIHByb3RvO1xuICAgIGlmIChpc0FycmF5KHRoaXMpKSB7XG4gICAgICAgIHByb3RvID0gbWl4KHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzIGluc3RhbmNlb2YgT2JqZWN0U2NvcGUpIHtcbiAgICAgICAgcHJvdG8gPSB0aGlzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYmplY3RTY29wZShrZXlzLnNwbGl0KCd8JykpO1xuICAgIH1cbiAgICBJbmhlcml0ZWRPYmplY3RTY29wZS5wcm90b3R5cGUgPSBwcm90bztcbiAgICByZXR1cm4gbmV3IEluaGVyaXRlZE9iamVjdFNjb3BlKGtleXMuc3BsaXQoJ3wnKSwgcHJvdG8pO1xufVxuO1xuZnVuY3Rpb24gbWl4KHByb3Rvcykge1xuICAgIHZhciBzY29wZSA9IGNyZWF0ZShudWxsKTtcbiAgICBmb3IgKHZhciBsZW5ndGggPSBwcm90b3MubGVuZ3RoLCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyArK2luZGV4KSB7XG4gICAgICAgIHZhciBwcm90byA9IHByb3Rvc1tpbmRleF07XG4gICAgICAgIGZvciAodmFyIGlkIGluIHByb3RvKSB7XG4gICAgICAgICAgICBzY29wZVtpZF0gPSBwcm90b1tpZF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNjb3BlO1xufVxuZnVuY3Rpb24gRnVuY3Rpb25TY29wZShjYWNoZSkge1xuICAgIGZ1bmN0aW9uIHNjb3BlKGtleSkgeyByZXR1cm4gY2FjaGVba2V5XSB8fCAoY2FjaGVba2V5XSA9IElkZW50aWZpZXIoKSk7IH1cbiAgICBzY29wZS5fID0gZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gc3RyaW5nLnJlcGxhY2UoU0VBUkNILCByZXBsYWNlcik7IH07XG4gICAgZnVuY3Rpb24gcmVwbGFjZXIoX19rZXlfXykgeyByZXR1cm4gc2NvcGUoX19rZXlfXy5zbGljZSgyLCAtMikpOyB9XG4gICAgcmV0dXJuIHNjb3BlO1xufVxuZnVuY3Rpb24gT2JqZWN0U2NvcGUoa2V5cykge1xuICAgIHRoaXMuXyA9IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHNlYXJjaCwgcmVwbGFjZXIpOyB9O1xuICAgIHZhciBzZWFyY2ggPSBTZWFyY2goa2V5cyk7XG4gICAgdmFyIHJlcGxhY2VyID0gUmVwbGFjZXIodGhpcyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSBrZXlzLmxlbmd0aDsgaW5kZXg7KSB7XG4gICAgICAgIHRoaXNba2V5c1stLWluZGV4XV0gPSBJZGVudGlmaWVyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gSW5oZXJpdGVkT2JqZWN0U2NvcGUoa2V5cywgcHJvdG8pIHtcbiAgICB0aGlzLl8gPSBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiBzdHJpbmcucmVwbGFjZShzZWFyY2gsIHJlcGxhY2VyKTsgfTtcbiAgICBmb3IgKHZhciBpbmRleCA9IGtleXMubGVuZ3RoOyBpbmRleDspIHtcbiAgICAgICAgdGhpc1trZXlzWy0taW5kZXhdXSA9IElkZW50aWZpZXIoKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHByb3RvKSB7XG4gICAgICAgIGtleSA9PT0gJ18nIHx8IGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICB2YXIgc2VhcmNoID0gU2VhcmNoKGtleXMpO1xuICAgIHZhciByZXBsYWNlciA9IFJlcGxhY2VyKHRoaXMpO1xuICAgIEluaGVyaXRlZE9iamVjdFNjb3BlLnByb3RvdHlwZSA9IE5VTEw7XG59XG5mdW5jdGlvbiBTZWFyY2goa2V5cykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdfXycgKyBncm91cGlmeShrZXlzLCBmYWxzZSwgdHJ1ZSkgKyAnX18nLCAnZycpO1xufVxuZnVuY3Rpb24gUmVwbGFjZXIoc2NvcGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZXIoX19rZXlfXykgeyByZXR1cm4gc2NvcGVbX19rZXlfXy5zbGljZSgyLCAtMildOyB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxOamIzQmxMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNUVUZCVFN4cFFrRkJhVUlzUTBGQlF6dEJRVU16UXl4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFMUJRVTBzWTBGQll5eERRVUZETzBGQlJURkRMRWxCUVVrc1UwRkJiMElzUTBGQlF6dEJRVU42UWl4SlFVRkpMRTlCUVU4c1IwRkJNRUlzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTnVSQ3hKUVVGSkxFMUJRVTBzUjBGQk9FTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenRCUVVOMFJTeEpRVUZKTEUxQlFVMHNSMEZCVnl4eFEwRkJjVU1zUTBGQlF6dEJRVU16UkN4SlFVRkpMRWxCUVVrc1IwRkJWeXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU4wUkN4WFFVRlhMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVVUzUWl4TlFVRk5MRU5CUVVNc1QwRkJUeXhWUVVGVkxFdEJRVXNzUTBGQmFVTXNTVUZCWVR0SlFVTXhSU3hKUVVGTExFbEJRVWtzUzBGQlJ5eFRRVUZUTEVWQlFVYzdVVUZCUlN4UFFVRlBMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1dVRkJXU3hYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dExRVUZGTzBsQlEyaEpMRWxCUVVrc1MwRkJZU3hEUVVGRE8wbEJRMnhDTEVsQlFVc3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGSE8xRkJRVVVzUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVGRk8xTkJRM1JETEVsQlFVc3NTVUZCU1N4WlFVRlpMRmRCUVZjc1JVRkJSenRSUVVGRkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTMEZCUlR0VFFVTndSRHRSUVVGRkxFOUJRVThzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlFVVTdTVUZEYWtRc2IwSkJRVzlDTEVOQlFVTXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRKUVVOMlF5eFBRVUZQTEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU42UkN4RFFVRkRPMEZCUVVFc1EwRkJRenRCUVVWR0xGTkJRVk1zUjBGQlJ5eERRVUZqTEUxQlFXZENPMGxCUTNwRExFbEJRVWtzUzBGQlN5eEhRVUZYTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOcVF5eExRVUZOTEVsQlFVa3NUVUZCVFN4SFFVRlhMRTFCUVUwc1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZITzFGQlF6VkZMRWxCUVVrc1MwRkJTeXhIUVVGWExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTnNReXhMUVVGTkxFbEJRVWtzUlVGQlJTeEpRVUZKTEV0QlFVc3NSVUZCUnp0WlFVRkZMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1UwRkJSVHRMUVVOc1JEdEpRVU5FTEU5QlFVOHNTMEZCU3l4RFFVRkRPMEZCUTJRc1EwRkJRenRCUVVWRUxGTkJRVk1zWVVGQllTeERRVUZqTEV0QlFXRTdTVUZEYUVRc1UwRkJVeXhMUVVGTExFTkJRVVVzUjBGQlZ5eEpRVUZaTEU5QlFVOHNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVVVzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRlZCUVZVc1JVRkJSU3hEUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlF6VkdMRXRCUVVzc1EwRkJReXhEUVVGRExFZEJRVWNzVlVGQlZTeE5RVUZqTEVsQlFVa3NUMEZCVHl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOcVJpeFRRVUZUTEZGQlFWRXNRMEZCUlN4UFFVRmxMRWxCUVZrc1QwRkJUeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnVSaXhQUVVGUExFdEJRVXNzUTBGQlF6dEJRVU5rTEVOQlFVTTdRVUZGUkN4VFFVRlRMRmRCUVZjc1EwRkJSU3hKUVVGak8wbEJRMjVETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hOUVVGakxFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTm9SaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRNVUlzU1VGQlNTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRemxDTEV0QlFVMHNTVUZCU1N4TFFVRkxMRWRCUVZjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVkQlFVazdVVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4VlFVRlZMRVZCUVVVc1EwRkJRenRMUVVGRk8wRkJRM2hHTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzlDUVVGdlFpeERRVUZGTEVsQlFXTXNSVUZCUlN4TFFVRmhPMGxCUXpORUxFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4TlFVRmpMRWxCUVVrc1QwRkJUeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5vUml4TFFVRk5MRWxCUVVrc1MwRkJTeXhIUVVGWExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4SFFVRkpPMUZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFTkJRVU03UzBGQlJUdEpRVU4yUml4TFFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJ6dFJRVUZGTEVkQlFVY3NTMEZCUnl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVRkZPMGxCUTNwRUxFbEJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVNeFFpeEpRVUZKTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE9VSXNiMEpCUVc5Q0xFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXp0QlFVTjJReXhEUVVGRE8wRkJSVVFzVTBGQlV5eE5RVUZOTEVOQlFVVXNTVUZCWXp0SlFVTTVRaXhQUVVGUExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGREwwUXNRMEZCUXp0QlFVVkVMRk5CUVZNc1VVRkJVU3hEUVVGRkxFdEJRV0U3U1VGREwwSXNUMEZCVHl4VFFVRlRMRkZCUVZFc1EwRkJSU3hQUVVGbExFbEJRVmtzVDBGQlR5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRelZHTEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJuY205MWNHbG1lU0I5SUdaeWIyMGdKMEJzZEdRdmFpMW5jbTkxY0dsbWVTYzdYRzVwYlhCdmNuUWdleUJKWkdWdWRHbG1hV1Z5SUgwZ1puSnZiU0FuTGk5SlpHVnVkR2xtYVdWeUp6dGNibHh1ZG1GeUlIVnVaR1ZtYVc1bFpDQTZkVzVrWldacGJtVmtPMXh1ZG1GeUlHbHpRWEp5WVhrZ09paGhjbWNnT21GdWVTa2dQVDRnWW05dmJHVmhiaUE5SUVGeWNtRjVMbWx6UVhKeVlYazdYRzUyWVhJZ1kzSmxZWFJsSURvb2J5QTZiMkpxWldOMElId2diblZzYkN3Z2NISnZjR1Z5ZEdsbGN6OHBJRDArSUc5aWFtVmpkQ0E5SUU5aWFtVmpkQzVqY21WaGRHVTdYRzUyWVhJZ1UwVkJVa05JSURwU1pXZEZlSEFnUFNBdlgxOWJZUzE2WFZ0aExYb3dMVGxkS2lnL09sOWJZUzE2TUMwNVhTc3BLbDlmTDJsbk8xeHVkbUZ5SUU1VlRFd2dPbTlpYW1WamRDQTlJRTlpYW1WamRDNW1jbVZsZW1Vb1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tTazdYRzVQWW1wbFkzUlRZMjl3WlM1d2NtOTBiM1I1Y0dVZ1BTQk9WVXhNTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCVFkyOXdaU0FvZEdocGN5QTZiMkpxWldOMFcxMGdmQ0J2WW1wbFkzUWdmQ0JoYm5rc0lHdGxlWE0vSURwemRISnBibWNwSURwR2RXNWpkR2x2YmlCOElHOWlhbVZqZENCN1hHNWNkR2xtSUNnZ2EyVjVjejA5UFhWdVpHVm1hVzVsWkNBcElIc2djbVYwZFhKdUlFWjFibU4wYVc5dVUyTnZjR1VvYVhOQmNuSmhlU2gwYUdsektTQS9JRzFwZUNoMGFHbHpLU0E2SUdOeVpXRjBaU2gwYUdseklHbHVjM1JoYm1ObGIyWWdUMkpxWldOMFUyTnZjR1VnUHlCMGFHbHpJRG9nYm5Wc2JDa3BPeUI5WEc1Y2RIWmhjaUJ3Y205MGJ5QTZiMkpxWldOME8xeHVYSFJwWmlBb0lHbHpRWEp5WVhrb2RHaHBjeWtnS1NCN0lIQnliM1J2SUQwZ2JXbDRLSFJvYVhNcE95QjlYRzVjZEdWc2MyVWdhV1lnS0NCMGFHbHpJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBVMk52Y0dVZ0tTQjdJSEJ5YjNSdklEMGdkR2hwY3pzZ2ZWeHVYSFJsYkhObElIc2djbVYwZFhKdUlHNWxkeUJQWW1wbFkzUlRZMjl3WlNoclpYbHpMbk53YkdsMEtDZDhKeWtwT3lCOVhHNWNkRWx1YUdWeWFYUmxaRTlpYW1WamRGTmpiM0JsTG5CeWIzUnZkSGx3WlNBOUlIQnliM1J2TzF4dVhIUnlaWFIxY200Z2JtVjNJRWx1YUdWeWFYUmxaRTlpYW1WamRGTmpiM0JsS0d0bGVYTXVjM0JzYVhRb0ozd25LU3dnY0hKdmRHOHBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdiV2w0SUNoMGFHbHpJRHAyYjJsa0xDQndjbTkwYjNNZ09tOWlhbVZqZEZ0ZEtTQTZiMkpxWldOMElIdGNibHgwZG1GeUlITmpiM0JsSURwdlltcGxZM1FnUFNCamNtVmhkR1VvYm5Wc2JDazdYRzVjZEdadmNpQW9JSFpoY2lCc1pXNW5kR2dnT201MWJXSmxjaUE5SUhCeWIzUnZjeTVzWlc1bmRHZ3NJR2x1WkdWNElEMGdNRHNnYVc1a1pYZzhiR1Z1WjNSb095QXJLMmx1WkdWNElDa2dlMXh1WEhSY2RIWmhjaUJ3Y205MGJ5QTZiMkpxWldOMElEMGdjSEp2ZEc5elcybHVaR1Y0WFR0Y2JseDBYSFJtYjNJZ0tDQjJZWElnYVdRZ2FXNGdjSEp2ZEc4Z0tTQjdJSE5qYjNCbFcybGtYU0E5SUhCeWIzUnZXMmxrWFRzZ2ZWeHVYSFI5WEc1Y2RISmxkSFZ5YmlCelkyOXdaVHRjYm4xY2JseHVablZ1WTNScGIyNGdSblZ1WTNScGIyNVRZMjl3WlNBb2RHaHBjem9nZG05cFpDd2dZMkZqYUdVZ09tOWlhbVZqZENrZ09rWjFibU4wYVc5dUlIdGNibHgwWm5WdVkzUnBiMjRnYzJOdmNHVWdLR3RsZVNBNmMzUnlhVzVuS1NBNmMzUnlhVzVuSUhzZ2NtVjBkWEp1SUdOaFkyaGxXMnRsZVYwZ2ZId2dLQ0JqWVdOb1pWdHJaWGxkSUQwZ1NXUmxiblJwWm1sbGNpZ3BJQ2s3SUgxY2JseDBjMk52Y0dVdVh5QTlJR1oxYm1OMGFXOXVJQ2h6ZEhKcGJtY2dPbk4wY21sdVp5a2dleUJ5WlhSMWNtNGdjM1J5YVc1bkxuSmxjR3hoWTJVb1UwVkJVa05JTENCeVpYQnNZV05sY2lrN0lIMDdYRzVjZEdaMWJtTjBhVzl1SUhKbGNHeGhZMlZ5SUNoZlgydGxlVjlmSURwemRISnBibWNwSURwemRISnBibWNnZXlCeVpYUjFjbTRnYzJOdmNHVW9YMTlyWlhsZlh5NXpiR2xqWlNneUxDQXRNaWtwT3lCOVhHNWNkSEpsZEhWeWJpQnpZMjl3WlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnVDJKcVpXTjBVMk52Y0dVZ0tHdGxlWE1nT25OMGNtbHVaMXRkS1NBNmRtOXBaQ0I3WEc1Y2RIUm9hWE11WHlBOUlHWjFibU4wYVc5dUlDaHpkSEpwYm1jZ09uTjBjbWx1WnlrZ2V5QnlaWFIxY200Z2MzUnlhVzVuTG5KbGNHeGhZMlVvYzJWaGNtTm9MQ0J5WlhCc1lXTmxjaWs3SUgwN1hHNWNkSFpoY2lCelpXRnlZMmdnUFNCVFpXRnlZMmdvYTJWNWN5azdYRzVjZEhaaGNpQnlaWEJzWVdObGNpQTlJRkpsY0d4aFkyVnlLSFJvYVhNcE8xeHVYSFJtYjNJZ0tDQjJZWElnYVc1a1pYZ2dPbTUxYldKbGNpQTlJR3RsZVhNdWJHVnVaM1JvT3lCcGJtUmxlRHNnS1NCN0lIUm9hWE5iYTJWNWMxc3RMV2x1WkdWNFhWMGdQU0JKWkdWdWRHbG1hV1Z5S0NrN0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1NXNW9aWEpwZEdWa1QySnFaV04wVTJOdmNHVWdLR3RsZVhNZ09uTjBjbWx1WjF0ZExDQndjbTkwYnlBNmIySnFaV04wS1NBNmRtOXBaQ0I3WEc1Y2RIUm9hWE11WHlBOUlHWjFibU4wYVc5dUlDaHpkSEpwYm1jZ09uTjBjbWx1WnlrZ2V5QnlaWFIxY200Z2MzUnlhVzVuTG5KbGNHeGhZMlVvYzJWaGNtTm9MQ0J5WlhCc1lXTmxjaWs3SUgwN1hHNWNkR1p2Y2lBb0lIWmhjaUJwYm1SbGVDQTZiblZ0WW1WeUlEMGdhMlY1Y3k1c1pXNW5kR2c3SUdsdVpHVjRPeUFwSUhzZ2RHaHBjMXRyWlhseld5MHRhVzVrWlhoZFhTQTlJRWxrWlc1MGFXWnBaWElvS1RzZ2ZWeHVYSFJtYjNJZ0tDQjJZWElnYTJWNUlHbHVJSEJ5YjNSdklDa2dleUJyWlhrOVBUMG5YeWNnZkh3Z2EyVjVjeTV3ZFhOb0tHdGxlU2s3SUgxY2JseDBkbUZ5SUhObFlYSmphQ0E5SUZObFlYSmphQ2hyWlhsektUdGNibHgwZG1GeUlISmxjR3hoWTJWeUlEMGdVbVZ3YkdGalpYSW9kR2hwY3lrN1hHNWNkRWx1YUdWeWFYUmxaRTlpYW1WamRGTmpiM0JsTG5CeWIzUnZkSGx3WlNBOUlFNVZURXc3WEc1OVhHNWNibVoxYm1OMGFXOXVJRk5sWVhKamFDQW9hMlY1Y3lBNmMzUnlhVzVuVzEwcElEcFNaV2RGZUhBZ2UxeHVYSFJ5WlhSMWNtNGdibVYzSUZKbFowVjRjQ2duWDE4bksyZHliM1Z3YVdaNUtHdGxlWE1zSUdaaGJITmxMQ0IwY25WbEtTc25YMThuTENBblp5Y3BPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQlNaWEJzWVdObGNpQW9jMk52Y0dVZ09tOWlhbVZqZENrZ2UxeHVYSFJ5WlhSMWNtNGdablZ1WTNScGIyNGdjbVZ3YkdGalpYSWdLRjlmYTJWNVgxOGdPbk4wY21sdVp5a2dPbk4wY21sdVp5QjdJSEpsZEhWeWJpQnpZMjl3WlZ0ZlgydGxlVjlmTG5Oc2FXTmxLRElzSUMweUtWMDdJSDA3WEc1OVhHNGlYWDA9IiwiZXhwb3J0IGZ1bmN0aW9uIFRlbXBsYXRlKGh0bWwsIHNjb3BlKSB7XG4gICAgcmV0dXJuIHNjb3BlLl8oaHRtbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyKGNvZGUsIHNjb3BlKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCd3aXRoKHRoaXMpe3JldHVybiAnICsgKHNjb3BlID8gc2NvcGUuXyhjb2RlKSA6IGNvZGUpICsgJ30nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBTdGF0aWNSZW5kZXJGbnMoY29kZXMsIHNjb3BlKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm5bZnVuY3Rpb24oKXt3aXRoKHRoaXMpe3JldHVybiAnICsgKHNjb3BlXG4gICAgICAgID8gc2NvcGUuXyhjb2Rlcy5qb2luKCd9fSxmdW5jdGlvbigpe3dpdGgodGhpcyl7cmV0dXJuICcpKVxuICAgICAgICA6IGNvZGVzLmpvaW4oJ319LGZ1bmN0aW9uKCl7d2l0aCh0aGlzKXtyZXR1cm4gJykpICsgJ319XScpKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJsYlhCc1lYUmxMRkpsYm1SbGNpeFRkR0YwYVdOU1pXNWtaWEpHYm5NdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVFVGQlRTeFZRVUZWTEZGQlFWRXNRMEZCUlN4SlFVRlpMRVZCUVVVc1MwRkJTenRKUVVNMVF5eFBRVUZQTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGRFSXNRMEZCUXp0QlFVVkVMRTFCUVUwc1ZVRkJWU3hOUVVGTkxFTkJRVVVzU1VGQldTeEZRVUZGTEV0QlFVMDdTVUZETTBNc1QwRkJUeXhSUVVGUkxFTkJRVU1zYjBKQlFXOUNMRWRCUVVNc1EwRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUlN4SFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRelZGTEVOQlFVTTdRVUZGUkN4TlFVRk5MRlZCUVZVc1pVRkJaU3hEUVVGRkxFdEJRV1VzUlVGQlJTeExRVUZOTzBsQlEzWkVMRTlCUVU4c1VVRkJVU3hEUVVOa0xITkRRVUZ6UXl4SFFVRkRMRU5CUVVVc1MwRkJTenRSUVVNM1F5eERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEd0RFFVRnJReXhEUVVGRExFTkJRVU03VVVGRGVrUXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBOQlFXdERMRU5CUVVNc1EwRkRhRVFzUjBGQlF5eExRVUZMTEVOQlExQXNSVUZCUlN4RFFVRkRPMEZCUTB3c1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0JtZFc1amRHbHZiaUJVWlcxd2JHRjBaU0FvYUhSdGJDQTZjM1J5YVc1bkxDQnpZMjl3WlNrZ09uTjBjbWx1WnlCN1hHNWNkSEpsZEhWeWJpQnpZMjl3WlM1ZktHaDBiV3dwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdVbVZ1WkdWeUlDaGpiMlJsSURwemRISnBibWNzSUhOamIzQmxQeWtnT2taMWJtTjBhVzl1SUh0Y2JseDBjbVYwZFhKdUlFWjFibU4wYVc5dUtDZDNhWFJvS0hSb2FYTXBlM0psZEhWeWJpQW5LeWdnYzJOdmNHVWdQeUJ6WTI5d1pTNWZLR052WkdVcElEb2dZMjlrWlNBcEt5ZDlKeWs3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQlRkR0YwYVdOU1pXNWtaWEpHYm5NZ0tHTnZaR1Z6SURwemRISnBibWRiWFN3Z2MyTnZjR1UvS1NBNlJuVnVZM1JwYjI1YlhTQjdYRzVjZEhKbGRIVnliaUJHZFc1amRHbHZiaWhjYmx4MFhIUW5jbVYwZFhKdVcyWjFibU4wYVc5dUtDbDdkMmwwYUNoMGFHbHpLWHR5WlhSMWNtNGdKeXNvSUhOamIzQmxYRzVjZEZ4MFhIUS9JSE5qYjNCbExsOG9ZMjlrWlhNdWFtOXBiaWduZlgwc1puVnVZM1JwYjI0b0tYdDNhWFJvS0hSb2FYTXBlM0psZEhWeWJpQW5LU2xjYmx4MFhIUmNkRG9nWTI5a1pYTXVhbTlwYmlnbmZYMHNablZ1WTNScGIyNG9LWHQzYVhSb0tIUm9hWE1wZTNKbGRIVnliaUFuS1Z4dVhIUmNkQ2tySjMxOVhTZGNibHgwS1NncE8xeHVmVnh1SWwxOSIsImV4cG9ydCBkZWZhdWx0IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAgIGZ1bmN0aW9uYWw6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogdHJ1ZVxuICAgIH0sXG4gICAgcmVuZGVyOiB7IGNvbmZpZ3VyYWJsZTogZmFsc2UsIGVudW1lcmFibGU6IHRydWUsIHdyaXRhYmxlOiBmYWxzZSwgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihjcmVhdGVFbGVtZW50LCBjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnc3R5bGUnLCBjb250ZXh0LmRhdGEsIGNvbnRleHQuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbE5VV1V4RkxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEdWQlFXVXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRGJFTXNWVUZCVlN4RlFVRkZMRVZCUVVVc1dVRkJXU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzUzBGQlN5eEZRVU14UlN4SlFVRkpPMHRCUTBvN1NVRkRSQ3hOUVVGTkxFVkJRVVVzUlVGQlJTeFpRVUZaTEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUTNSRkxGTkJRVk1zVFVGQlRTeERRVUZGTEdGQlFXRXNSVUZCUlN4UFFVRlBPMWxCUTNSRExFOUJRVThzWVVGQllTeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0UlFVTXZSQ3hEUVVGRE8wdEJRMFE3UTBGRFJDeERRVUZETEVOQlFVTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdaR1ZtWVhWc2RDQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3NJSHRjYmx4MFpuVnVZM1JwYjI1aGJEb2dleUJqYjI1bWFXZDFjbUZpYkdVNklHWmhiSE5sTENCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCM2NtbDBZV0pzWlRvZ1ptRnNjMlVzSUhaaGJIVmxPbHh1WEhSY2RIUnlkV1ZjYmx4MGZTeGNibHgwY21WdVpHVnlPaUI3SUdOdmJtWnBaM1Z5WVdKc1pUb2dabUZzYzJVc0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lIZHlhWFJoWW14bE9pQm1ZV3h6WlN3Z2RtRnNkV1U2WEc1Y2RGeDBablZ1WTNScGIyNGdjbVZ1WkdWeUlDaGpjbVZoZEdWRmJHVnRaVzUwTENCamIyNTBaWGgwS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnWTNKbFlYUmxSV3hsYldWdWRDZ25jM1I1YkdVbkxDQmpiMjUwWlhoMExtUmhkR0VzSUdOdmJuUmxlSFF1WTJocGJHUnlaVzRwTzF4dVhIUmNkSDFjYmx4MGZWeHVmU2s3SWwxOSIsInZhciBoZWFkID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmZpcnN0Q2hpbGQ7XG5leHBvcnQgZnVuY3Rpb24gU3R5bGUoY3NzLCBzY29wZSkge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgaWYgKGNzcykge1xuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHNjb3BlID8gc2NvcGUuXyhjc3MpIDogY3NzO1xuICAgIH1cbiAgICByZXR1cm4gaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKHN0eWxlKSB7XG4gICAgaGVhZC5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgcmV0dXJuIHJlbW92ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsTjBlV3hsTEhKbGJXOTJaUzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeEpRVUZKTEVsQlFVa3NSMEZIU2l4UlFVRlJMRU5CUVVNc1pVRkJaU3hEUVVGRExGVkJRVlVzUTBGQlF6dEJRVVY0UXl4TlFVRk5MRlZCUVZVc1MwRkJTeXhEUVVGRkxFZEJRVmtzUlVGQlJTeExRVUZOTzBsQlF6RkRMRWxCUVVrc1MwRkJTeXhIUVVGeFFpeFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wbEJRemxFTEVsQlFVc3NSMEZCUnl4RlFVRkhPMUZCUVVVc1MwRkJTeXhEUVVGRExGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJRenRMUVVGRk8wbEJRemxFTEU5QlFVOHNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU5vUXl4RFFVRkRPMEZCUlVRc1RVRkJUU3hWUVVGVkxFMUJRVTBzUTBGQlJTeExRVUYxUWp0SlFVTTVReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNoQ0xFOUJRVThzVFVGQlRTeERRVUZETzBGQlEyWXNRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkluWmhjaUJvWldGa0lEcDdYRzVjZEdGd2NHVnVaRU5vYVd4a0lEb29ibVYzUTJocGJHUXBJRDArSUhSNWNHVnZaaUJ1WlhkRGFHbHNaQ3hjYmx4MGNtVnRiM1psUTJocGJHUWdPaWh2YkdSRGFHbHNaQ2tnUFQ0Z2RIbHdaVzltSUc5c1pFTm9hV3hrTEZ4dWZTQTlJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNW1hWEp6ZEVOb2FXeGtPMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnVTNSNWJHVWdLR056Y3o4Z09uTjBjbWx1Wnl3Z2MyTnZjR1UvS1NBNlNGUk5URk4wZVd4bFJXeGxiV1Z1ZENCN1hHNWNkSFpoY2lCemRIbHNaU0E2U0ZSTlRGTjBlV3hsUld4bGJXVnVkQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM04wZVd4bEp5azdYRzVjZEdsbUlDZ2dZM056SUNrZ2V5QnpkSGxzWlM1MFpYaDBRMjl1ZEdWdWRDQTlJSE5qYjNCbElEOGdjMk52Y0dVdVh5aGpjM01wSURvZ1kzTnpPeUI5WEc1Y2RISmxkSFZ5YmlCb1pXRmtMbUZ3Y0dWdVpFTm9hV3hrS0hOMGVXeGxLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxiVzkyWlNBb2MzUjViR1VnT2toVVRVeFRkSGxzWlVWc1pXMWxiblFwSURwMGVYQmxiMllnY21WdGIzWmxJSHRjYmx4MGFHVmhaQzV5WlcxdmRtVkRhR2xzWkNoemRIbHNaU2s3WEc1Y2RISmxkSFZ5YmlCeVpXMXZkbVU3WEc1OVhHNGlYWDA9IiwiLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uP3RleHQnO1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuaW1wb3J0IHsgSWRlbnRpZmllciB9IGZyb20gJy4vSWRlbnRpZmllcic7XG5leHBvcnQgeyBJZGVudGlmaWVyIH07XG5pbXBvcnQgU2NvcGUgZnJvbSAnLi9TY29wZSc7XG5leHBvcnQgeyBTY29wZSB9O1xuaW1wb3J0IHsgVGVtcGxhdGUsIFJlbmRlciwgU3RhdGljUmVuZGVyRm5zIH0gZnJvbSAnLi9UZW1wbGF0ZSxSZW5kZXIsU3RhdGljUmVuZGVyRm5zJztcbmV4cG9ydCB7IFRlbXBsYXRlLCBSZW5kZXIsIFN0YXRpY1JlbmRlckZucyB9O1xuaW1wb3J0IFNUWUxFIGZyb20gJy4vU1RZTEUnO1xuZXhwb3J0IHsgU1RZTEUgfTtcbmltcG9ydCB7IFN0eWxlLCByZW1vdmUgfSBmcm9tICcuL1N0eWxlLHJlbW92ZSc7XG5leHBvcnQgeyBTdHlsZSwgcmVtb3ZlIH07XG52YXIgalZ1ZSA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAgIElkZW50aWZpZXI6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogSWRlbnRpZmllciB9LFxuICAgIFNjb3BlOiB7IGNvbmZpZ3VyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgdmFsdWU6IFNjb3BlIH0sXG4gICAgVGVtcGxhdGU6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogVGVtcGxhdGUgfSxcbiAgICBSZW5kZXI6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogUmVuZGVyIH0sXG4gICAgU3RhdGljUmVuZGVyRm5zOiB7IGNvbmZpZ3VyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgdmFsdWU6IFN0YXRpY1JlbmRlckZucyB9LFxuICAgIFNUWUxFOiB7IGNvbmZpZ3VyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgdmFsdWU6IFNUWUxFIH0sXG4gICAgU3R5bGU6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogU3R5bGUgfSxcbiAgICByZW1vdmU6IHsgY29uZmlndXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IGZhbHNlLCB2YWx1ZTogcmVtb3ZlIH0sXG4gICAgdmVyc2lvbjogeyBjb25maWd1cmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIHZhbHVlOiB2ZXJzaW9uIH0sXG4gICAgZGVmYXVsdDogeyBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0gfVxufSk7XG5leHBvcnQgZGVmYXVsdCBqVnVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1WNGNHOXlkQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGhRVUZoTzBGQlEySXNUMEZCVHl4UFFVRlBMRTFCUVUwc1owSkJRV2RDTEVOQlFVTTdRVUZEY2tNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBGQlJXNUNMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVVzVFVGQlRTeGpRVUZqTEVOQlFVTTdRVUZETVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETzBGQlJYUkNMRTlCUVU4c1MwRkJTeXhOUVVGTkxGTkJRVk1zUTBGQlF6dEJRVU0xUWl4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU03UVVGRmFrSXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNiVU5CUVcxRExFTkJRVU03UVVGRGRFWXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFVkJRVVVzWlVGQlpTeEZRVUZGTEVOQlFVTTdRVUZGTjBNc1QwRkJUeXhMUVVGTExFMUJRVThzVTBGQlV5eERRVUZETzBGQlF6ZENMRTlCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF6dEJRVVZxUWl4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEdkQ1FVRm5RaXhEUVVGRE8wRkJReTlETEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFTkJRVU03UVVGRmVrSXNTVUZCU1N4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVTdTVUZET1VJc1ZVRkJWU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVTdTVUZEZGtVc1MwRkJTeXhGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdTVUZETjBRc1VVRkJVU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdTVUZEYmtVc1RVRkJUU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVTdTVUZETDBRc1pVRkJaU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeGxRVUZsTEVWQlFVVTdTVUZEYWtZc1MwRkJTeXhGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdTVUZETjBRc1MwRkJTeXhGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdTVUZETjBRc1RVRkJUU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVTdTVUZETDBRc1QwRkJUeXhGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlFVVTdTVUZEYWtVc1QwRkJUeXhGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1kwRkJZeXhQUVVGUExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0RFFVTnVSU3hEUVVGRExFTkJRVU03UVVGRFNDeGxRVUZsTEVsQlFVa3NRMEZCUXlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRUIwY3kxcFoyNXZjbVZjYm1sdGNHOXlkQ0IyWlhKemFXOXVJR1p5YjIwZ0p5NHZkbVZ5YzJsdmJqOTBaWGgwSnp0Y2JtVjRjRzl5ZENCN0lIWmxjbk5wYjI0Z2ZUdGNibHh1YVcxd2IzSjBJSHNnU1dSbGJuUnBabWxsY2lCOUlHWnliMjBnSnk0dlNXUmxiblJwWm1sbGNpYzdYRzVsZUhCdmNuUWdleUJKWkdWdWRHbG1hV1Z5SUgwN1hHNWNibWx0Y0c5eWRDQlRZMjl3WlNCbWNtOXRJQ2N1TDFOamIzQmxKenRjYm1WNGNHOXlkQ0I3SUZOamIzQmxJSDA3WEc1Y2JtbHRjRzl5ZENCN0lGUmxiWEJzWVhSbExDQlNaVzVrWlhJc0lGTjBZWFJwWTFKbGJtUmxja1p1Y3lCOUlHWnliMjBnSnk0dlZHVnRjR3hoZEdVc1VtVnVaR1Z5TEZOMFlYUnBZMUpsYm1SbGNrWnVjeWM3WEc1bGVIQnZjblFnZXlCVVpXMXdiR0YwWlN3Z1VtVnVaR1Z5TENCVGRHRjBhV05TWlc1a1pYSkdibk1nZlR0Y2JseHVhVzF3YjNKMElGTlVXVXhGSUNCbWNtOXRJQ2N1TDFOVVdVeEZKenRjYm1WNGNHOXlkQ0I3SUZOVVdVeEZJSDA3WEc1Y2JtbHRjRzl5ZENCN0lGTjBlV3hsTENCeVpXMXZkbVVnZlNCbWNtOXRJQ2N1TDFOMGVXeGxMSEpsYlc5MlpTYzdYRzVsZUhCdmNuUWdleUJUZEhsc1pTd2djbVZ0YjNabElIMDdYRzVjYm5aaGNpQnFWblZsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0xDQjdYRzVjZEVsa1pXNTBhV1pwWlhJNklIc2dZMjl1Wm1sbmRYSmhZbXhsT2lCbVlXeHpaU3dnZDNKcGRHRmliR1U2SUdaaGJITmxMQ0IyWVd4MVpUb2dTV1JsYm5ScFptbGxjaUI5TEZ4dVhIUlRZMjl3WlRvZ2V5QmpiMjVtYVdkMWNtRmliR1U2SUdaaGJITmxMQ0IzY21sMFlXSnNaVG9nWm1Gc2MyVXNJSFpoYkhWbE9pQlRZMjl3WlNCOUxGeHVYSFJVWlcxd2JHRjBaVG9nZXlCamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExDQjNjbWwwWVdKc1pUb2dabUZzYzJVc0lIWmhiSFZsT2lCVVpXMXdiR0YwWlNCOUxGeHVYSFJTWlc1a1pYSTZJSHNnWTI5dVptbG5kWEpoWW14bE9pQm1ZV3h6WlN3Z2QzSnBkR0ZpYkdVNklHWmhiSE5sTENCMllXeDFaVG9nVW1WdVpHVnlJSDBzWEc1Y2RGTjBZWFJwWTFKbGJtUmxja1p1Y3pvZ2V5QmpiMjVtYVdkMWNtRmliR1U2SUdaaGJITmxMQ0IzY21sMFlXSnNaVG9nWm1Gc2MyVXNJSFpoYkhWbE9pQlRkR0YwYVdOU1pXNWtaWEpHYm5NZ2ZTeGNibHgwVTFSWlRFVTZJSHNnWTI5dVptbG5kWEpoWW14bE9pQm1ZV3h6WlN3Z2QzSnBkR0ZpYkdVNklHWmhiSE5sTENCMllXeDFaVG9nVTFSWlRFVWdmU3hjYmx4MFUzUjViR1U2SUhzZ1kyOXVabWxuZFhKaFlteGxPaUJtWVd4elpTd2dkM0pwZEdGaWJHVTZJR1poYkhObExDQjJZV3gxWlRvZ1UzUjViR1VnZlN4Y2JseDBjbVZ0YjNabE9pQjdJR052Ym1acFozVnlZV0pzWlRvZ1ptRnNjMlVzSUhkeWFYUmhZbXhsT2lCbVlXeHpaU3dnZG1Gc2RXVTZJSEpsYlc5MlpTQjlMRnh1WEhSMlpYSnphVzl1T2lCN0lHTnZibVpwWjNWeVlXSnNaVG9nWm1Gc2MyVXNJSGR5YVhSaFlteGxPaUJtWVd4elpTd2dkbUZzZFdVNklIWmxjbk5wYjI0Z2ZTeGNibHgwWkdWbVlYVnNkRG9nZXlCamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExDQm5aWFE2SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwZ2ZWeHVmU2s3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JxVm5WbE8xeHVJbDE5Il0sIm5hbWVzIjpbInVuZGVmaW5lZCIsImNyZWF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrQkFBZSxPQUFPOztJQ0F0QixJQUFJLFVBQVUsR0FBRztJQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFB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QUMsRUFBRTtJQUN0RSxJQUFJLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUU7SUFDM0IsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDNUUsSUFBSSxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsSUFBSSxJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHO0lBQzFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUM7SUFDM0MsS0FBSztJQUNMLENBQUM7SUFDRCxTQUFTLG9CQUFvQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7SUFDM0MsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsTUFBTSxFQUFFLEVBQUUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDNUUsSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHO0lBQzFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUM7SUFDM0MsS0FBSztJQUNMLElBQUksS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUU7SUFDM0IsUUFBUSxHQUFHLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEMsS0FBSztJQUNMLElBQUksSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxD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