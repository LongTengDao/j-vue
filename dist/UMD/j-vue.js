/*!
 * 模块名称：jVue
 * 模块功能：对 .vue 文件进行构建后的前端统一依赖。从属于“简计划”。
   　　　　　The unified dependency for built .vue files. Belong to "Plan J".
 * 模块版本：7.0.0
 * 许可条款：LGPL-3.0
 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
 * 问题反馈：https://GitHub.com/LongTengDao/j-vue/issues
 * 项目主页：https://GitHub.com/LongTengDao/j-vue/
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.jVue = factory());
}(this, function () { 'use strict';

	var version = '7.0.0';

	var dictionary = {
		0: '1', 1: '2', 2: '3', 3: '4', 4: '5', 5: '6', 6: '7', 7: '8', 8: '9', 9: 'a',
		a: 'b', b: 'c', c: 'd', d: 'e', e: 'f', f: 'g', g: 'h',
		h: 'i', i: 'j', j: 'k', k: 'l', l: 'm', m: 'n', n: 'o',
		o: 'p', p: 'q', q: 'r', r: 's', s: 't', t: 'u',
		u: 'v', v: 'w', w: 'x', x: 'y', y: 'z'
	};

	var latestIdentifierCharacters = ['9'];
	var latestIdentifierCharacters_lastCharacter = '9';
	var latestIdentifierCharacters_lastCharacterIndex = 0;

	//var RESERVED_KEY = /^(?:break|c(?:a(?:se|tch)|lass|on(?:st|tinue))|d(?:e(?:bugger|fault|lete)|o)|e(?:lse|num|x(?:port|tends))|f(?:inally|or|unction)|i(?:f|mport|n(?:stanceof)?)|new|return|s(?:witch|super)|t(?:ry|ypeof)|v(?:ar|oid)|w(?:hile|ith))$/;

	function Identifier () {
		
		if ( latestIdentifierCharacters_lastCharacter==='z' ) {
			latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = '0';
			for ( var characterIndex = latestIdentifierCharacters_lastCharacterIndex; ; ) {
				if ( characterIndex ) {
					if ( latestIdentifierCharacters[--characterIndex]==='z' ) {
						latestIdentifierCharacters[characterIndex] = '0';
					}
					else {
						latestIdentifierCharacters[characterIndex] = dictionary[latestIdentifierCharacters[characterIndex]];
						break;
					}
				}
				else {
					latestIdentifierCharacters.unshift('a');
					++latestIdentifierCharacters_lastCharacterIndex;
					break;
				}
			}
		}
		else {
			latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = dictionary[latestIdentifierCharacters_lastCharacter];
		}
		
		//var identifier = latestIdentifierCharacters.join('');
		//if ( RESERVED_KEY.test(identifier) ) {
		//	latestIdentifierCharacters_lastCharacter = latestIdentifierCharacters[latestIdentifierCharacters_lastCharacterIndex] = dictionary[latestIdentifierCharacters_lastCharacter];
		//	return latestIdentifierCharacters.join('');
		//}
		//return identifier;
		
		return latestIdentifierCharacters.join('');
		
	}

	/*!
	 * 模块名称：@ltd/j-groupify
	 * 模块功能：将一个字符串数组，转化为分支式优化后的正则表达式匹配组。
	   　　　　　Transform a string array into a branch-style optimized regExp group.
	 * 模块版本：1.0.0
	 * 许可条款：LGPL-3.0
	 * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)
	 * 问题反馈：https://GitHub.com/LongTengDao/j-groupify/issues
	 * 项目主页：https://GitHub.com/LongTengDao/j-groupify/
	 */

	var create = Object.create;

	function appendBranch (group, key) {
		if ( key ) {
			appendBranch(group[key[0]] || ( group[key[0]] = create(null) ), key.slice(1));
		}
	}

	function sourcify (group) {
		var branches = [];
		for ( var char in group ) { branches.push(char+sourcify(group[char])); }
		return branches.length===0 ? '' : branches.length===1 ? branches[0] : '(?:'+branches.join('|')+')';
	}

	function groupify (branches) {
		var group = create(null);
		for ( var length = branches.length, index = 0; index<length; ++index ) { appendBranch(group, branches[index]); }
		return sourcify(group);
	}

	/*¡ @ltd/j-groupify */

	var undefined$1;
	var isArray = Array.isArray;
	var create$1 = Object.create;
	var SEARCH = /__[a-z][a-z0-9]*(?:_[a-z0-9]+)*__/ig;
	var NOOP = /^(?!)/;
	var NULL = Object.freeze(Object.create(null));
	ObjectScope.prototype = NULL;

	function Scope (keys) {
		if ( keys===undefined$1 ) { return FunctionScope(isArray(this) ? mix(this) : create$1(this instanceof ObjectScope ? this : null)); }
		if ( isArray(this) ) { var proto = mix(this); }
		else if ( this instanceof ObjectScope ) { proto = this; }
		else { return new ObjectScope(keys.split('|')); }
		InheritedObjectScope.prototype = proto;
		return new InheritedObjectScope(keys.split('|'), proto);
	}
	function mix (protos) {
		var scope = create$1(null);
		for ( var length = protos.length, index = 0; index<length; ++index ) {
			var proto = protos[index];
			for ( var id in proto ) { scope[id] = proto[id]; }
		}
		return scope;
	}

	function FunctionScope (cache) {
		function scope (key) { return cache[key] || ( cache[key] = Identifier() ); }
		scope._search = SEARCH;
		scope._replacer = function _replacer (__key__) { return scope(__key__.slice(2, -2)); };
		return scope;
	}

	function ObjectScope (keys) {
		this._search = Search(keys);
		this._replacer = Replacer(this);
		for ( var index = keys.length; index; ) { this[keys[--index]] = Identifier(); }
	}

	function InheritedObjectScope (keys, proto) {
		this._search = null;
		this._replacer = Replacer(this);
		for ( var index = keys.length; index; ) { this[keys[--index]] = Identifier(); }
		for ( var key in proto ) { key[0]==='_' || keys.push(key); }
		this._search = Search(keys);
		InheritedObjectScope.prototype = NULL;
	}

	function Search (keys) {
		var group = groupify(keys);
		return group ? new RegExp('__'+group+'__', 'g') : NOOP;
	}

	function Replacer (scope) {
		return function _replacer (__key__) {
			return scope[__key__.slice(2, -2)];
		};
	}

	function Render (code, scope) {
		return RenderFn(scope ? code.replace(scope._search, scope._replacer) : code);
	}

	function StaticRenderFns (codes, scope) {
		var fns = [];
		var length = codes.length;
		var index = 0;
		if ( scope ) {
			var _search = scope._search;
			var _replacer = scope._replacer;
			while ( index<length ) { fns.push(RenderFn(codes[index++].replace(_search, _replacer))); }
		}
		else {
			while ( index<length ) { fns.push(RenderFn(scope, codes[index++])); }
		}
		return fns;
	}

	function RenderFn (code) {
		return Function('with(this){return '+code+'}');
	}

	var STYLE = Object.create(null, {
		functional: { configurable: false, enumerable: true, writable: false, value:
			true
		},
		render: { configurable: false, enumerable: true, writable: false, value:
			function render (createElement, context) {
				return createElement('style', context.data, context.children);
			}
		}
	});

	var head = document.documentElement.firstChild;

	function Style (css, scope) {
		var style = document.createElement('style');
		if ( css ) { style.textContent = scope ? css.replace(scope._search, scope._replacer) : css; }
		return head.appendChild(style);
	}

	function remove (style) {
		head.removeChild(style);
		return remove;
	}

	var jVue = Object.create(null, {
		Identifier: { configurable: false, writable: false, value: Identifier },
		Scope: { configurable: false, writable: false, value: Scope },
		Render: { configurable: false, writable: false, value: Render },
		StaticRenderFns: { configurable: false, writable: false, value: StaticRenderFns },
		STYLE: { configurable: false, writable: false, value: STYLE },
		Style: { configurable: false, writable: false, value: Style },
		remove: { configurable: false, writable: false, value: remove },
		version: { configurable: false, writable: false, value: version },
		default: { configurable: false, get: function () { return this; } }
	});

	return jVue;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,